/*
 * ModelPropertiesDialog.cpp
 *
 *  Created on: 13.03.2012
 *      Author: michi
 */

#include "ModelPropertiesDialog.h"
#include "../../../Edward.h"
#include "../ModeModel.h"
#include "../../../Action/Model/Data/ActionModelAddMaterial.h"
#include "../../../Action/Model/Data/ActionModelEditData.h"



#define InertiaTensorDec			2
#define DetailDistDec				2

extern matrix3 InertiaTensorTemp;
extern float DetailDistTemp1, DetailDistTemp2, DetailDistTemp3;

ModelPropertiesDialog::ModelPropertiesDialog(CHuiWindow *_parent, bool _allow_parent, DataModel *_data):
	CHuiWindow("dummy", -1, -1, 800, 600, _parent, _allow_parent, HuiWinModeControls, true)
{
	data = _data;

	// dialog
	FromResource("model_dialog");

	EventM("cancel", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnClose);
	EventM("hui:close", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnClose);
	EventM("apply", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::ApplyData);
	EventM("ok", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnOk);
	EventM("generate_dists_auto", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnGenerateDistsAuto);
	EventM("generate_dists", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnGenerateDists);
	EventM("generate_skin_2", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnGenerateSkin2);
	EventM("generate_skin_3", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnGenerateSkin3);
	EventM("material_list", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnMaterialList);
	EventMX("material_list", "hui:change", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnMaterialListCheck);
	EventMX("material_list", "hui:select", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnMaterialListSelect);
	EventM("add_material", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnAddMaterial);
	EventM("delete_material", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnDeleteMaterial);
	EventM("ph_passive", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnPhysicsPassive);
	EventM("generate_tensor_auto", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnGenerateTensorAuto);
	EventM("mass", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnGenerateTensorAuto);
	EventM("num_items", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnNumItems);
	EventM("model_inventary", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnModelInventary);
	EventM("delete_item", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnDeleteItem);
	EventM("max_script_vars", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnMaxScriptVars);
	EventMX("script_vars", "hui:change", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnScriptVarEdit);
	EventM("script_find", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnScriptFind);
	EventM("model_script_var_template", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnModelScriptVarTemplate);

	Subscribe(data);

	temp = data->meta_data;
	LoadData();
}

ModelPropertiesDialog::~ModelPropertiesDialog()
{
	mode_model->PropertiesDialog = NULL;
	Unsubscribe(data);
}

void ModelPropertiesDialog::LoadData()
{
// viewing properties (LOD)
	if (temp.AutoGenerateDists)
		data->GenerateDetailDists(temp.DetailDist);
	SetDecimals(DetailDistDec);
	SetFloat("detail_dist_1", temp.DetailDist[0]);
	SetFloat("detail_dist_2", temp.DetailDist[1]);
	SetFloat("detail_dist_3", temp.DetailDist[2]);
	Enable("detail_dist_1", !temp.AutoGenerateDists);
	Enable("detail_dist_2", !temp.AutoGenerateDists);
	Enable("detail_dist_3", !temp.AutoGenerateDists);
	SetInt("detail_factor_2", temp.DetailFactor[1]);
	SetInt("detail_factor_3", temp.DetailFactor[2]);
	Check("generate_dists_auto", temp.AutoGenerateDists);
	Check("generate_skin_auto_2", temp.AutoGenerateSkin[1]);
	Check("generate_skin_auto_3", temp.AutoGenerateSkin[2]);
	FillMaterialList();
	// physics
	if (temp.AutoGenerateTensor)
		temp.InertiaTensor = data->GenerateInertiaTensor(temp.Mass);
	SetFloat("mass", temp.Mass);
	Check("ph_active", temp.ActivePhysics);
	Check("ph_passive", temp.PassivePhysics);
	Enable("ph_active", temp.PassivePhysics);
	SetDecimals(InertiaTensorDec);
	SetFloat("tensor_xx", temp.InertiaTensor._00);
	SetFloat("tensor_yy", temp.InertiaTensor._11);
	SetFloat("tensor_zz", temp.InertiaTensor._22);
	SetFloat("tensor_xy", temp.InertiaTensor._01);
	SetFloat("tensor_xz", temp.InertiaTensor._02);
	SetFloat("tensor_yz", temp.InertiaTensor._12);
	Enable("tensor_xx", !temp.AutoGenerateTensor);
	Enable("tensor_yy", !temp.AutoGenerateTensor);
	Enable("tensor_zz", !temp.AutoGenerateTensor);
	Enable("tensor_xy", !temp.AutoGenerateTensor);
	Enable("tensor_xz", !temp.AutoGenerateTensor);
	Enable("tensor_yz", !temp.AutoGenerateTensor);
	Check("generate_tensor_auto", temp.AutoGenerateTensor);
	// items
	SetString("model_name", temp.Name);
	SetString("model_description", temp.Description);
	SetInt("num_items", temp.Inventary.num);
	RefillInventaryList();
	// script
	SetString("script", temp.ScriptFile);
	SetInt("max_script_vars", temp.ScriptVar.num);
	RefillScriptVarList();

	/*for (int i=0;i<NumScriptVarFiles;i++)
		SetString("model_script_var_template", data->ScriptVarFile[i]);*/
}

void ModelPropertiesDialog::OnUpdate(Observable *o)
{
	//FillMaterialList();
	temp = data->meta_data;
	LoadData();
}

color col_mul(const color &a, const color &b)
{
	return color(1, a.r * b.r, a.g * b.g, a.b * b.b);
}

vector img_get_ball_n(int x, int y, int N)
{
	//vector n = vector(x - N/2, y - N/2, 0);
	vector n = vector(x - N/2, y - N/2, 0);
	n.z = - sqrt(N*N/2 - n.x*n.x - n.y*n.y);
	n.normalize();
	return n;
}

string render_material(ModelMaterial *m)
{
	// texture?
	int tex = NixLoadTexture(m->TextureFile[0]);
	if (tex < 0)
		if (m->material->num_textures > 0)
			tex = m->material->texture[0];

	const int N = 32;

	// simulate a lit sphere
	Image img;
	img.Create(N, N, Black);
	vector light_dir = vector(-1, -1, -1);
	light_dir.normalize();
	vector cam_dir = - e_z;
	vector light_sp_dir = light_dir + cam_dir;
	light_sp_dir.normalize();
	for (int x=0;x<N;x++)
		for (int y=0;y<N;y++){
			// ambient + diffuse + emission
			vector n = img_get_ball_n(x, y, N);
			float f = clampf(n * light_dir, 0, 1);
			color c = m->Ambient * 0.3f + m->Diffuse * f + m->Emission;

			// texture "mapping"
			if (tex >= 0)
				c = col_mul(c, NixTexture[tex].Icon.GetPixel(x, y));
			else
				c = c * 0.8f;

			// specular
			f = pow(n * light_sp_dir, m->Shininess) * 0.4f;
			c += m->Specular * f;

			c = c * 0.9f;
			c.clamp();
			c.a = 1;
			img.SetPixel(x, y, c);
		}
	return HuiSetImage(img);
}

string file_secure(const string &filename)
{
	if (filename.num > 0)
		return filename;
	return _("   - ohne Datei -");
}

void ModelPropertiesDialog::FillMaterialList()
{
	Reset("material_list");
	for (int i=0;i<data->Material.num;i++){
		int nt = 0;
		foreach(ModelSurface &s, data->Surface)
			foreach(ModelTriangle &t, s.Triangle)
				if (t.Material == i)
					nt ++;
		string im = render_material(&data->Material[i]);
		AddString("material_list", format("%d\\%d\\%s\\%s\\%s", i, nt, (i == data->CurrentMaterial) ? "true" : "false", im.c_str(), file_secure(data->Material[i].MaterialFile).c_str()));
	}
	Enable("delete_material", false);
}

void ModelPropertiesDialog::RefillInventaryList()
{
	Reset("model_inventary");
	foreachi(string &it, temp.Inventary, i)
		AddString("model_inventary", format("%d\\%s", i, it.c_str()));
}

void ModelPropertiesDialog::RefillScriptVarList()
{
	Reset("script_vars");
	foreachi(float v, temp.ScriptVar, i)
		/*if (i<NumObjectScriptVarNames)
			AddString("script_vars", format("%d\\%s\\%.6f", i, ObjectScriptVarName[i].c_str(), v));
		else*/
			AddString("script_vars", format("%d\\\\%.6f", i, v));
}


// viewings
void ModelPropertiesDialog::OnGenerateDistsAuto()
{
	bool b = IsChecked("");
	Enable("detail_dist_1", !b);
	Enable("detail_dist_2", !b);
	Enable("detail_dist_3", !b);
	if (b)
		OnGenerateDists();
}

void ModelPropertiesDialog::OnGenerateDists()
{
	data->GenerateDetailDists(temp.DetailDist);
	SetDecimals(DetailDistDec);
	SetFloat("detail_dist_1", temp.DetailDist[0]);
	SetFloat("detail_dist_2", temp.DetailDist[1]);
	SetFloat("detail_dist_3", temp.DetailDist[2]);
}

void ModelPropertiesDialog::OnGenerateSkin2()
{
//	data->CreateSkin(&data->Skin[1], &data->Skin[2], s2f(GetString("detail_factor_2"))*0.01f);
}

void ModelPropertiesDialog::OnGenerateSkin3()
{
//	data->CreateSkin(&data->Skin[1], &data->Skin[3], s2f(GetString("detail_factor_3"))*0.01f);
}

// material
void ModelPropertiesDialog::OnMaterialList()
{
	int s = GetInt("");
	if (s < 0)
		return;

	data->CurrentMaterial = s;
	data->CurrentTextureLevel = 0;
	mode_model->ExecuteMaterialDialog(0);
	FillMaterialList();
}

void ModelPropertiesDialog::OnMaterialListCheck()
{
	data->CurrentMaterial = HuiGetEvent()->row;
	data->CurrentTextureLevel = 0;
	FillMaterialList();
}

void ModelPropertiesDialog::OnMaterialListSelect()
{
	int s = GetInt("");
	Enable("delete_material", s >= 0);
}

void ModelPropertiesDialog::OnAddMaterial()
{
	data->Execute(new ActionModelAddMaterial());
}

void ModelPropertiesDialog::OnDeleteMaterial()
{
	HuiErrorBox(this, "", "noch nicht implementiert");
	// TODO
	FillMaterialList();
}

// physics
void ModelPropertiesDialog::OnPhysicsPassive()
{
	Enable("ph_active", IsChecked("ph_passive"));
}

void ModelPropertiesDialog::OnGenerateTensorAuto()
{
	//case HMM_MASS:
	//case HMM_GENERATE_TENSOR_AUTO:
	bool b = IsChecked("generate_tensor_auto");
	Enable("tensor_xx", !b);
	Enable("tensor_yy", !b);
	Enable("tensor_zz", !b);
	Enable("tensor_xy", !b);
	Enable("tensor_xz", !b);
	Enable("tensor_yz", !b);
	if (b){
		SetDecimals(InertiaTensorDec);
		temp.InertiaTensor = data->GenerateInertiaTensor(GetFloat("mass"));
		SetFloat("tensor_xx", temp.InertiaTensor._00);
		SetFloat("tensor_yy", temp.InertiaTensor._11);
		SetFloat("tensor_zz", temp.InertiaTensor._22);
		SetFloat("tensor_xy", temp.InertiaTensor._01);
		SetFloat("tensor_xz", temp.InertiaTensor._02);
		SetFloat("tensor_yz", temp.InertiaTensor._12);
	}
}

// inventary
void ModelPropertiesDialog::OnNumItems()
{
	temp.Inventary.resize(GetInt(""));
	RefillInventaryList();
}

void ModelPropertiesDialog::OnModelInventary()
{
	if (ed->FileDialog(FDModel, false, true)){
		int n = GetInt("");
		temp.Inventary[n] = ed->DialogFileNoEnding;
		ChangeString("model_inventary", n, format("%d\\", n) + ed->DialogFileNoEnding);
	}
}

void ModelPropertiesDialog::OnDeleteItem()
{
	int n = GetInt("model_inventary");
	if (n >= 0){
		temp.Inventary[n] = "";
		RefillInventaryList();
	}
}

// script
void ModelPropertiesDialog::OnMaxScriptVars()
{
	temp.ScriptVar.resize(GetInt("max_script_vars"));
	RefillScriptVarList();
}

void ModelPropertiesDialog::OnScriptVarEdit()
{
	int row = HuiGetEvent()->row;
	msg_write(HuiGetEvent()->row);
	temp.ScriptVar[row] = s2f(GetCell("script_vars", row, 2));
}

void ModelPropertiesDialog::OnScriptFind()
{
	if (ed->FileDialog(FDScript, false, true))
		SetString("script", ed->DialogFile);
}

void ModelPropertiesDialog::OnModelScriptVarTemplate()
{
//	int n = GetInt("");
	//strcpy(ObjectScriptVarFile, ScriptVarFile[n]);
//	LoadScriptVarNames(1, ScriptVarFile[n]);
	RefillScriptVarList();
}

void ModelPropertiesDialog::ApplyData()
{
// visual properties
	temp.DetailDist[0]	= GetFloat("detail_dist_1");
	temp.DetailDist[1]	= GetFloat("detail_dist_2");
	temp.DetailDist[2]	= GetFloat("detail_dist_3");
	temp.DetailFactor[1]	= GetInt("detail_factor_2");
	temp.DetailFactor[2]	= GetInt("detail_factor_3");
	temp.AutoGenerateDists	= IsChecked("generate_dists_auto");
	temp.AutoGenerateSkin[1]	= IsChecked("generate_skin_auto_2");
	temp.AutoGenerateSkin[2]	= IsChecked("generate_skin_auto_3");
// physics
	temp.PassivePhysics = IsChecked("ph_passive");
	temp.ActivePhysics = IsChecked("ph_active");
	temp.Mass = GetFloat("mass");
	temp.AutoGenerateTensor = IsChecked("generate_tensor_auto");
	temp.InertiaTensor._00 = GetFloat("tensor_xx");
	temp.InertiaTensor._01 = GetFloat("tensor_xy");
	temp.InertiaTensor._02 = GetFloat("tensor_xz");
	temp.InertiaTensor._10 = GetFloat("tensor_xy");
	temp.InertiaTensor._11 = GetFloat("tensor_yy");
	temp.InertiaTensor._12 = GetFloat("tensor_yz");
	temp.InertiaTensor._20 = GetFloat("tensor_xz");
	temp.InertiaTensor._21 = GetFloat("tensor_yz");
	temp.InertiaTensor._22 = GetFloat("tensor_zz");
// inventary
	temp.Name = GetString("model_name");
	temp.Description = GetString("model_description");
// script
	temp.ScriptFile = GetString("script");

	data->Execute(new ActionModelEditData(temp));

			//Change(true,true);
			//Change();
}

void ModelPropertiesDialog::OnClose()
{
	delete(this);
}

void ModelPropertiesDialog::OnOk()
{
	ApplyData();
	delete(this);
}
