/*
 * ModelPropertiesDialog.cpp
 *
 *  Created on: 13.03.2012
 *      Author: michi
 */

#include "ModelPropertiesDialog.h"
#include "../../../Edward.h"
#include "../ModeModel.h"



#define InertiaTensorDec			2
#define DetailDistDec				2

extern matrix3 InertiaTensorTemp;
extern float DetailDistTemp1, DetailDistTemp2, DetailDistTemp3;

ModelPropertiesDialog::ModelPropertiesDialog(CHuiWindow *_parent, bool _allow_parent, DataModel *_data):
	CHuiWindow("dummy", -1, -1, 800, 600, _parent, _allow_parent, HuiWinModeControls, true)
{
	data = _data;

	// dialog
	FromResource("model_dialog");

	EventM("cancel", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnClose);
	EventM("hui:close", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnClose);
	EventM("set", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::ApplyData);
	EventM("ok", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnOk);
	EventM("generate_dists_auto", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnGenerateDistsAuto);
	EventM("generate_dists", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnGenerateDists);
	EventM("generate_skin_2", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnGenerateSkin2);
	EventM("generate_skin_3", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnGenerateSkin3);
	EventMX("material_list", "hui:activate", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnMaterialList);
	EventMX("material_list", "hui:change", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnMaterialListCheck);
	EventM("ph_passive", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnPhysicsPassive);
	EventM("generate_tensor_auto", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnGenerateTensorAuto);
	EventM("mass", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnGenerateTensorAuto);
	EventM("num_items", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnNumItems);
	EventM("model_inventary", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnModelInventary);
	EventM("delete_item", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnDeleteItem);
	EventM("max_script_vars", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnMaxScriptVars);
	EventM("script_find", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnScriptFind);
	EventM("model_script_var_template", this, (void(HuiEventHandler::*)())&ModelPropertiesDialog::OnModelScriptVarTemplate);

	LoadData();
}

ModelPropertiesDialog::~ModelPropertiesDialog()
{
	mode_model->PropertiesDialog = NULL;
}

void ModelPropertiesDialog::LoadData()
{
// viewing properties (LOD)
	if (data->AutoGenerateDists)
		data->GenerateDetailDists();
	SetDecimals(DetailDistDec);
	SetFloat("detail_dist_1", data->DetailDist[0]);
	SetFloat("detail_dist_2", data->DetailDist[1]);
	SetFloat("detail_dist_3", data->DetailDist[2]);
	Enable("detail_dist_1", !data->AutoGenerateDists);
	Enable("detail_dist_2", !data->AutoGenerateDists);
	Enable("detail_dist_3", !data->AutoGenerateDists);
	SetInt("detail_factor_2", data->DetailFactor[1]);
	SetInt("detail_factor_3", data->DetailFactor[2]);
	Check("generate_dists_auto", data->AutoGenerateDists);
	Check("generate_skin_auto_2", data->AutoGenerateSkin[1]);
	Check("generate_skin_auto_3", data->AutoGenerateSkin[2]);
	FillMaterialList();
	// physics
	if (data->AutoGenerateTensor)
		data->GenerateInertiaTensor(data->Mass);
	SetFloat("mass", data->Mass);
	Check("ph_active", data->ActivePhysics);
	Check("ph_passive", data->PassivePhysics);
	Enable("ph_active", data->PassivePhysics);
	SetDecimals(InertiaTensorDec);
	SetFloat("tensor_xx", data->InertiaTensor._00);
	SetFloat("tensor_yy", data->InertiaTensor._11);
	SetFloat("tensor_zz", data->InertiaTensor._22);
	SetFloat("tensor_xy", data->InertiaTensor._01);
	SetFloat("tensor_xz", data->InertiaTensor._02);
	SetFloat("tensor_yz", data->InertiaTensor._12);
	Enable("tensor_xx", !data->AutoGenerateTensor);
	Enable("tensor_yy", !data->AutoGenerateTensor);
	Enable("tensor_zz", !data->AutoGenerateTensor);
	Enable("tensor_xy", !data->AutoGenerateTensor);
	Enable("tensor_xz", !data->AutoGenerateTensor);
	Enable("tensor_yz", !data->AutoGenerateTensor);
	Check("generate_tensor_auto", data->AutoGenerateTensor);
	// items
	SetString("model_name", data->Name);
	SetString("model_description", data->Description);
	SetInt("num_items", data->Inventary.num);
	temp_item = data->Inventary;
	RefillInventaryList();
	// script
	SetString("script", data->ScriptFile);
	SetInt("max_script_vars", data->ScriptVar.num);
	temp_script_var = data->ScriptVar;
	RefillScriptVarList();

	/*for (int i=0;i<NumScriptVarFiles;i++)
		SetString("model_script_var_template", data->ScriptVarFile[i]);*/
}

color mat_get_col(ModeModelMaterial *m)
{
	if (m->UserColor)
		return m->Color[1];
	return m->material->diffuse;
}

string render_material(ModeModelMaterial *m)
{
	int tex = NixLoadTexture(m->TextureFile[0]);
	if (tex < 0)
		if (m->material->num_textures > 0)
			tex = m->material->texture[0];
	if (tex >= 0)
		return ed->get_tex_image(tex);
	Image img;
	img.Create(32, 32, mat_get_col(m));
	return HuiSetImage(img);
}

string file_secure(const string &filename)
{
	if (filename.num > 0)
		return filename;
	return _("   - ohne Datei -");
}

void ModelPropertiesDialog::FillMaterialList()
{
	Reset("material_list");
	for (int i=0;i<data->Material.num;i++){
		int nt = 0;
		foreach(data->Surface, s)
			foreach(s.Triangle, t)
			if (t.Material == i)
				nt ++;
		string im = render_material(&data->Material[i]);
		AddString("material_list", format("%d\\%d\\%s\\%s\\%s", i, nt, (i == data->CurrentMaterial) ? "true" : "false", im.c_str(), file_secure(data->Material[i].MaterialFile).c_str()));
	}
}

void ModelPropertiesDialog::RefillInventaryList()
{
	Reset("model_inventary");
	for (int i=0;i<temp_item.num;i++)
		AddString("model_inventary", format("%d\\%s", i, temp_item[i].c_str()));
}

void ModelPropertiesDialog::RefillScriptVarList()
{
	Reset("script_vars");
	for (int i=0;i<temp_script_var.num;i++)
		/*if (i<NumObjectScriptVarNames)
			AddString("script_vars", format("%d\\%s\\%.6f", i, ObjectScriptVarName[i].c_str(), temp_script_var[i]));
		else*/
			AddString("script_vars", format("%d\\\\%.6f", i, temp_script_var[i]));
}


// viewings
void ModelPropertiesDialog::OnGenerateDistsAuto()
{
	bool b = IsChecked("");
	Enable("detail_dist_1", !b);
	Enable("detail_dist_2", !b);
	Enable("detail_dist_3", !b);
	if (b)
		OnGenerateDists();
}

void ModelPropertiesDialog::OnGenerateDists()
{
	data->GenerateDetailDists(true);
	SetDecimals(DetailDistDec);
	SetFloat("detail_dist_1", DetailDistTemp1);
	SetFloat("detail_dist_2", DetailDistTemp2);
	SetFloat("detail_dist_3", DetailDistTemp3);
}

void ModelPropertiesDialog::OnGenerateSkin2()
{
//	data->CreateSkin(&data->Skin[1], &data->Skin[2], s2f(GetString("detail_factor_2"))*0.01f);
}

void ModelPropertiesDialog::OnGenerateSkin3()
{
//	data->CreateSkin(&data->Skin[1], &data->Skin[3], s2f(GetString("detail_factor_3"))*0.01f);
}

// material
void ModelPropertiesDialog::OnMaterialList()
{
	int s = GetInt("");
	if (s >= 0){
		data->CurrentMaterial = s;
		data->CurrentTextureLevel = 0;
		mode_model->ExecuteMaterialDialog(0);
		FillMaterialList();
	}
}

void ModelPropertiesDialog::OnMaterialListCheck()
{
	data->CurrentMaterial = HuiGetEvent()->row;
	data->CurrentTextureLevel = 0;
	FillMaterialList();
}

// physics
void ModelPropertiesDialog::OnPhysicsPassive()
{
	Enable("ph_active", IsChecked("ph_passive"));
}

void ModelPropertiesDialog::OnGenerateTensorAuto()
{
	//case HMM_MASS:
	//case HMM_GENERATE_TENSOR_AUTO:
	bool b = IsChecked("generate_tensor_auto");
	Enable("tensor_xx", !b);
	Enable("tensor_yy", !b);
	Enable("tensor_zz", !b);
	Enable("tensor_xy", !b);
	Enable("tensor_xz", !b);
	Enable("tensor_yz", !b);
	if (b){
		data->GenerateInertiaTensor(GetFloat("mass"), true);
		SetDecimals(InertiaTensorDec);
		matrix3 InertiaTensorTemp;
		SetFloat("tensor_xx", InertiaTensorTemp._00);
		SetFloat("tensor_yy", InertiaTensorTemp._11);
		SetFloat("tensor_zz", InertiaTensorTemp._22);
		SetFloat("tensor_xy", InertiaTensorTemp._01);
		SetFloat("tensor_xz", InertiaTensorTemp._02);
		SetFloat("tensor_yz", InertiaTensorTemp._12);
	}
}

// inventary
void ModelPropertiesDialog::OnNumItems()
{
	temp_item.resize(GetInt(""));
	RefillInventaryList();
}

void ModelPropertiesDialog::OnModelInventary()
{
	if (ed->FileDialog(FDModel, false, true)){
		int n = GetInt("");
		temp_item[n] = ed->DialogFileNoEnding;
		ChangeString("model_inventary", n, format("%d\\", n) + ed->DialogFileNoEnding);
	}
}

void ModelPropertiesDialog::OnDeleteItem()
{
	int n = GetInt("model_inventary");
	if (n >= 0){
		temp_item[n].clear();
		RefillInventaryList();
	}
}

// script
void ModelPropertiesDialog::OnMaxScriptVars()
{
	for (int i=0;i<temp_script_var.num;i++)
		temp_script_var[i] = s2f(GetCell("script_vars", i, 2));
	temp_script_var.resize(GetInt("max_script_vars"));
	RefillScriptVarList();
}

void ModelPropertiesDialog::OnScriptFind()
{
	if (ed->FileDialog(FDScript, false, true))
		SetString("script", ed->DialogFile);
}

void ModelPropertiesDialog::OnModelScriptVarTemplate()
{
//	int n = GetInt("");
	//strcpy(ObjectScriptVarFile, ScriptVarFile[n]);
//	LoadScriptVarNames(1, ScriptVarFile[n]);
	RefillScriptVarList();
}

void ModelPropertiesDialog::ApplyData()
{
// visual properties
	data->DetailDist[0]	= GetFloat("detail_dist_1");
	data->DetailDist[1]	= GetFloat("detail_dist_2");
	data->DetailDist[2]	= GetFloat("detail_dist_3");
	data->DetailFactor[1]	= GetInt("detail_factor_2");
	data->DetailFactor[2]	= GetInt("detail_factor_3");
	data->AutoGenerateDists	= IsChecked("generate_dists_auto");
	data->AutoGenerateSkin[1]	= IsChecked("generate_skin_auto_2");
	data->AutoGenerateSkin[2]	= IsChecked("generate_skin_auto_3");
// physics
	data->PassivePhysics = IsChecked("ph_passive");
	data->ActivePhysics = IsChecked("ph_active");
	data->Mass = GetFloat("mass");
	data->AutoGenerateTensor = IsChecked("generate_tensor_auto");
	data->InertiaTensor._00 = GetFloat("tensor_xx");
	data->InertiaTensor._01 = GetFloat("tensor_xy");
	data->InertiaTensor._02 = GetFloat("tensor_xz");
	data->InertiaTensor._10 = GetFloat("tensor_xy");
	data->InertiaTensor._11 = GetFloat("tensor_yy");
	data->InertiaTensor._12 = GetFloat("tensor_yz");
	data->InertiaTensor._20 = GetFloat("tensor_xz");
	data->InertiaTensor._21 = GetFloat("tensor_yz");
	data->InertiaTensor._22 = GetFloat("tensor_zz");
// inventary
	data->Name = GetString("model_name");
	data->Description = GetString("model_description");
	data->Inventary = temp_item;
	temp_item.clear();
// script
	data->ScriptFile = GetString("script");
	data->ScriptVar.resize(temp_script_var.num);
	for (int i=0;i<temp_script_var.num;i++)
		data->ScriptVar[i] = s2f(GetCell("script_vars", i, 2));//temp_script_var[i];
	temp_script_var.clear();


			//Change(true,true);
			//Change();
}

void ModelPropertiesDialog::OnClose()
{
	delete(this);
}

void ModelPropertiesDialog::OnOk()
{
	ApplyData();
	delete(this);
}
