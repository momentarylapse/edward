use edward.*

class NodePosition extends shader.Node
	func __init__()
		super.__init__("Position")
		params.add([shader.Type.INT, "space", "1", "choice=model|world|camera|window"])
		output.add([shader.Type.VEC3, "pos"])
	func override dependencies() -> string[]
		return ["in:pos", "in:matrix"]
	func override code_pixel(out c: shader.BuilderContext) -> string
		var t = c.create_out(self, 0)
		if params[0].value == "1" # world
			return "
	vec3 {{t}} = (inverse(matrix.view) * (in_pos / in_pos.w)).xyz;"
		if params[0].value == "2" # cam
			return "
	vec3 {{t}} = in_pos.xyz / in_pos.w;"
		if params[0].value == "3" # window
			return "
	vec3 {{t}} = (matrix.project * (in_pos / in_pos.w)).xyz;"
		#if params[0].value == "0" # model
		return "
	vec3 {{t}} = (inverse(matrix.view * matrix.model) * (in_pos / in_pos.w)).xyz;"
