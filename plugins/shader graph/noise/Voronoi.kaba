use edward.*

class NodeVoronoi extends shader.Node
	func __init__()
		super.__init__("Voronoi")
		params.add([shader.Type.VEC3, "p", "vec3(0,0,0)", ""])
		params.add([shader.Type.FLOAT, "scale", "4.0", "range=0.1:8"])
		params.add([shader.Type.FLOAT, "randomness", "0.5", "range=0:1"])
		params.add([shader.Type.FLOAT, "exponent", "2", "range=0:10"])
		output.add([shader.Type.COLOR, "out"])
		params.add([shader.Type.INT, "mode", "0", "choice=cell|edge"])
		output.add([shader.Type.FLOAT, "distance"])
		output.add([shader.Type.FLOAT, "edge"])
	func override dependencies() -> string[]
		return ["rand3d"]
	func override code_pixel(out c: shader.BuilderContext) -> string
		var o = c.create_out(self, 0)
		var o2 = c.create_out(self, 1)
		var t = c.create_out(self, 2)#c.create_temp(self, -1, shader.Type.FLOAT)
		return "
	float {{o2}} = 10000;
	float {{t}} = 10000;
	vec4 {{o}};
	for (int i=0; i<20; i++) {
		vec3 p = vec3(rand3d(vec3(i,0,0)), rand3d(vec3(i,1,0)), rand3d(vec3(i,2,0)));
		vec3 dd = fract(p - {{c.value(self, 0)}} / {{c.value(self, 1)}});
		if (dd.x > 0.5) dd.x = 1 - dd.x;
		if (dd.y > 0.5) dd.y = 1 - dd.y;
		if (dd.z > 0.5) dd.z = 1 - dd.z;
		float e = {{c.value(self, 3)}};
		float d = pow(pow(dd.x, e) + pow(dd.y, e) + pow(dd.z, e), 1/e);
		if (d < {{o2}}) {
			{{t}} = {{o2}};
			{{o2}} = d;
			{{o}} = vec4(rand3d(vec3(i,0,1)), rand3d(vec3(i,1,1)), rand3d(vec3(i,2,1)), 1);
		} else if (d < {{t}}) {
			{{t}} = d;
		}
	}
	{{t}} -= {{o2}};"
