use edward

class NodeBasicLighting extends shader.Node
	func __init__()
		super.__init__("BasicLighting")
		params.add([shader.Type.COLOR, "albedo", "#ffffffff", ""])
		params.add([shader.Type.FLOAT, "roughness", "0.3", "range=0:1"])
		params.add([shader.Type.FLOAT, "metal", "0.1", "range=0:1"])
		params.add([shader.Type.COLOR, "emission", "#000000ff", ""])
		params.add([shader.Type.VEC3, "normals", "-mesh-", ""])
		output.add([shader.Type.COLOR, "out"])
	func override const dependencies() -> string[]
		return ["basic_lighting", "in:light", "in:matrix", "in:material", "in:pos", "in:normal"]
	func override const code_pixel(out c: shader.BuilderContext) -> string
		var n = c.build_value(self, 5, "in_normal")
		var al = c.value(self, 0)
		var ro = c.value(self, 1)
		var me = c.value(self, 2)
		var em = c.value(self, 4)
		let t = c.create_out(self, 0)
		return "
	vec4 {{t}} = vec4(0,0,0,0);
	for (int i=0; i<num_lights; i++)
		{{t}} += basic_lighting({{n}}, {{al}}, {{ro}}, {{me}}, {{em}}, light[i]);"
