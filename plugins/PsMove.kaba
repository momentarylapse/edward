use edward
use hui
use thread
use helper.psmove

enum InteractionMode
	NONE
	OBJECT_ROTATE  # triangle
	CAM_ROTATE     # trigger
	CAM_ROTATE_EGO # move

class X extends Object
	var q0: quaternion
	var ac: MultiView.ActionController*
	var mv: MultiView*
	var win: MultiView.Window*
	var mode: InteractionMode
	var pm: PsMoveManager
	
	func override __init__()
		mode = InteractionMode.NONE
		
		pm.connect()
		print("plugin: {{len(pm.psmoves)}} controller found...")
	
	func mut start_grab(m: MyPSMoveController, _mode: InteractionMode)
		mode = _mode
		mv = ed.cur_mode.multi_view
		for _mv in mv
			ac = _mv.action_con
			win = _mv.active_win
		q0 = m.ang#rel_ang(m)
		if mode == InteractionMode.OBJECT_ROTATE
			for _ac in ac
				for _win in win
					_ac.start_action(_win, _ac.pos, 0)
		
	func mut end_grab()
		if mode == InteractionMode.OBJECT_ROTATE
			ac.end_action(true)
		mode = InteractionMode.NONE
	func rel_ang(m: MyPSMoveController) -> quaternion
		return win.local_ang * (m.ang * q0.bar()) * win.local_ang.bar()
		#return m.ang * win.local_ang.bar()
	func mut update_hold(m: MyPSMoveController)
		var qq = rel_ang(m) # * q0.bar()
		#print(qq.angles())
		if mode == InteractionMode.OBJECT_ROTATE
			ac.update_param(qq.angles())
		else if mode == InteractionMode.CAM_ROTATE_EGO
			mv.cam_rotate(m.dang, true)
		else if mode == InteractionMode.CAM_ROTATE
			mv.cam_rotate(m.dang, false)
	
	func step()
		pm.update()
		#if ed.cur_mode.name == "ModelAnimationSkeleton"
		for m in pm.psmoves
			if mode == InteractionMode.OBJECT_ROTATE
				if !m.button[0]
					end_grab()
			else if mode == InteractionMode.CAM_ROTATE
				if m.trigger < 0.2
					end_grab()
			else if mode == InteractionMode.CAM_ROTATE_EGO
				if !m.button[7]
					end_grab()
			else #  InteractionMode.NONE
				if m.trigger > 0.7
					start_grab(m, InteractionMode.CAM_ROTATE)
				else if m.button[7]
					start_grab(m, InteractionMode.CAM_ROTATE_EGO)
				else if m.button[0]
					start_grab(m, InteractionMode.OBJECT_ROTATE)
					
			if mode > InteractionMode.NONE
				update_hold(m)
			#print(str(m.button))
			#print(m.ang)

func main()
	var x = new X()
	hui.run_repeated(0.03, x, X.step)
