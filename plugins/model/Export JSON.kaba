use hui
use os
use edward.*

func vecToJson(v: vec3) -> string
	return "{{v.x}}, {{v.y}}, {{v.z}}"

func col3ToJson(c: color) -> string
	return "{{c.r}}, {{c.g}}, {{c.b}}"

func qToJson(q: quaternion) -> string
	return "{{q.x}}, {{q.y}}, {{q.z}}, {{q.w}}"

func materialToJson(m: Model.Material) -> string
	var s: string
	s += "	{\n"
	s += "		'DbgColor' : 15658734,\n"
	s += "		'DbgIndex' : 0,\n"
	s += "		'DbgName' : 'Test',\n"
	s += "		'blending' : 'NormalBlending',\n"
	s += "		'colorAmbient' : [{{col3ToJson(m.ambient)}}],\n"
	s += "		'colorDiffuse' : [{{col3ToJson(m.diffuse)}}],\n"
	s += "		'colorSpecular' : [{{col3ToJson(m.specular)}}],\n"
	s += "		'depthTest' : true,\n"
	s += "		'depthWrite' : true,\n"
	s += "		'shading' : 'Phong',\n"
	s += "		'specularCoef' : {{m.shininess}},\n"
	s += "		'transparency' : 1.0,\n"
	s += "		'transparent' : false,\n"
	s += "		'vertexColors' : false\n"
	s += "	}"
	return s

func bone_anim_pos(model: Model, f: Model.Move.Frame, i: int) -> vec3
	let parent = model.bone[i].parent
	if parent >= 0
		let dpos = model.bone[i].pos - model.bone[parent].pos
		let q = quaternion(f.skel_ang[parent])
		return bone_anim_pos(model, f, parent) + q * dpos
	return f.skel_dpos[i] + model.bone[i].pos

func moveToJson(model: Model, m: Model.Move) -> string
	var s: string
	s += "	{\n"
	s += "		'name': '{{m.name}}',\n"
	s += "		'fps': {{m.frames_per_sec_const}},\n"
	s += "		'length': {{(m.frame.num / m.frames_per_sec_const)}},\n"
	s += "		'hierarchy': [\n"
	for i=>b in model.bone
		s += "			{\n"
		s += "				'parent': -1,\n" #b.parent
		s += "				'keys': [\n"
		for j=>f in m.frame
			let q = quaternion(f.skel_ang[i])
			let dpos = bone_anim_pos(model, f, i) # - b.pos
#			if b.parent >= 0
#				var dq = QuaternionRotationV(f.skel_ang[b.parent])
#				#dpos -= dq * bone_anim_pos(f, b.parent)
#				q *= dq.bar()
			print(dpos)
			s += "					{\n"
			s += "						'time': {{(j / m.frames_per_sec_const)}},\n"
			s += "						'pos': [{{vecToJson(dpos)}}],\n"
			s += "						'rot': [{{qToJson(q)}}],\n"
			s += "						'scl': [1,1,1]\n"
			s += "					},\n"
		# looping...
		let q = quaternion(m.frame[0].skel_ang[i])
		s += "					{\n"
		s += "						'time': {{(m.frame.num / m.frames_per_sec_const)}},\n"
		s += "						'pos': [0,0,0],\n"
		s += "						'rot': [{{qToJson(q)}}],\n"
		s += "						'scl': [1,1,1]\n"
		s += "					}\n"
		s += "				]\n"
		if i < len(model.bone) - 1
			s += "			},\n"
		else
			s += "			}\n"
	s += "		]\n"
	s += "	}"
	return s

var model: Model&

func boneToJson(b: Model.Bone) -> string
	var s: string
	s += "	{\n"
	s += "		'parent': -1,\n" #b.parent
	var pos = b.pos
	#if b.parent >= 0
#		pos -= model.bone[b.parent].pos
	s += "		'name': 'xxx',\n"
	s += "		'pos': [{{vecToJson(pos)}}],\n"
	s += "		'scl': [1,1,1],\n"
	s += "		'rot': [0,0,0],\n"
	s += "		'rotq': [0,0,0,1]\n"
	s += "	}"
	return s

func save_file(filename: os.Path)
	var f = new os.TextLinesFormatter(os.fs.open(filename, "wt"))
	
	var n_tria = 0
	for p in model.mesh.polygon
		n_tria += p.side.num - 2

	var s = "{'metadata':{\n"
	s += "	'formatVersion': 3,\n"
	s += "	'generatedBy': 'Edward',\n"
	s += "	'vertices': {{model.mesh.vertex.num}},\n"
	s += "	'faces': {{n_tria}},\n"
	s += "	'normals': {{(n_tria*3)}},\n"
	s += "	'colors': 0,\n"
	s += "	'uvs': 1,\n"
	s += "	'morphTargets': 0,\n"
	s += "	'bones': {{model.bone.num}}\n"
	s += "},\n"
	s += "'influencesPerVertex': 1,\n"
	s += "'scale': 1.000,\n"
#	s += "'materials': [\n"
#	s += "	{\n"
#	s += "		'DbgColor' : 15658734,\n"
#	s += "		'DbgIndex' : 0,\n"
#	s += "		'DbgName' : 'Michi 1',\n"
#	s += "		'blending' : 'NormalBlending',\n"
#	s += "		'colorAmbient' : [0.75, 0.75, 0.75],\n"
#	s += "		'colorDiffuse' : [1.0, 1.0, 1.0],\n"
#	s += "		'colorSpecular' : [0.5, 0.5, 0.5],\n"
#	s += "		'depthTest' : true,\n"
#	s += "		'depthWrite' : true,\n"
#	s += "		'shading' : 'Phong',\n"
#	s += "		'specularCoef' : 50,\n"
#	s += "		'transparency' : 1.0,\n"
#	s += "		'transparent' : false,\n"
#	s += "		'vertexColors' : false\n"
#	s += "	}],\n"
	s += "'materials': [\n"
	for i=>m in model.material
		s += materialToJson(m)
		if i < len(model.material) - 1
			s += ",\n"
	s += "],\n"
	s += "'colors': [],\n"
	s += "'vertices': [\n"
	for i=>v in model.mesh.vertex
		s += "	" + vecToJson(v.pos)
		if i < len(model.mesh.vertex) - 1
			s += ",\n"
	s += "],\n"
	s += "'uvs': [[0,0]],\n"
	s += "'normals': [\n"
	for ip=>p in model.mesh.polygon
		for k=>side in p.side
			s += "	" + vecToJson(side.normal)
			if (ip < len(model.mesh.polygon) - 1) or (k < len(p.side) - 1)
				s += ",\n"
	s += "],\n"
	s += "'faces': [\n"
	var n_normals = 0
	for ip=>p in model.mesh.polygon
		for k=>side in p.side
			let _a = int(side.triangulation[0])
			let _b = int(side.triangulation[1])
			let _c = int(side.triangulation[2])
			let va = p.side[_a].vertex
			let vb = p.side[_b].vertex
			let vc = p.side[_c].vertex
			let na = n_normals + _a
			let nb = n_normals + _b
			let nc = n_normals + _c
			let n = p.temp_normal
			s += "	42, {{va}}, {{vb}}, {{vc}}, {{p.material}}, "
			s += "0, 0, 0, "
			s += "{{na}}, {{nb}}, {{nc}}"
			if (ip < len(model.mesh.polygon) - 1) or (k < len(p.side) - 1)
				s += ",\n"
		n_normals += len(p.side)
	s += "],\n"
#	s += "'morphTargets': [\n"
#	for int i, 0, model.Move.num
#		str += moveToJson(model.Move[i])
#		if i < model.Move.num - 1
#			str += ",\n"
#	s += "],\n"
	s += "'bones': [\n"
	for i=>b in model.bone
		s += boneToJson(b)
		if i < len(model.bone) - 1
			s += ",\n"
	s += "],\n"
	s += "'skinIndices': ["
	for i=>v in model.mesh.vertex
		s += str(v.bone_index)
		if i < len(model.mesh.vertex) - 1
			s += ", "
	s += "],\n"
	s += "'skinWeights': ["
	for i=>v in model.mesh.vertex
		s += "1"
		if i < len(model.mesh.vertex) - 1
			s += ", "
	s += "],\n"
	s += "'animations': [\n"
	var first_anim = true
	for i=>m in model.move
		if len(m.frame) == 0
			continue
		if !first_anim
			s += ",\n"
		s += moveToJson(model, m)
		first_anim = false
	s += "]\n"
	s += "}"
	s = s.replace("'", "\"")
	f << s


func main()
	print(p2s(cur_session))
	print(p2s(cur_session.win))
	print(p2s(cur_session.mode_model))
	model := cur_session.mode_model.data
	hui.file_dialog_save(cur_session.win, "Save JSON", "", ["filter=*.js"]).then(save_file)
	