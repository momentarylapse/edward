use hui
use os
use edward
use helper

var anim_index: int


func xang(ang: vec3) -> quaternion
	let l = len(ang)
	var ax = vec3.EZ
	if l > 0
		ax = ang / l
	return quaternion(ax, l)

func pain(va: vec3[], vb: vec3[], ang: vec3) -> float
	let q = xang(ang)
	var w = 0.0
	for j in 0:len(va)
		w += (va[j] - q*vb[j]).length_sqr()
	return w

func import_torso(p: vec3[]) -> quaternion
	var index: int[]
	var va, vb: vec3[]
	for i=>b in model.bone
		if b.parent == 0
			index.add(i)
			var a = p[i] - p[0]
			va.add(a / a.length())
			var bb = model.bone[i].pos - model.bone[0].pos
			vb.add(bb / bb.length())

	var ang = vec3.0
	let eps = 0.001
	for i in 0:3000
		let w0 = pain(va, vb, ang)
		let wx = pain(va, vb, ang + eps * vec3.EX)
		let wy = pain(va, vb, ang + eps * vec3.EY)
		let wz = pain(va, vb, ang + eps * vec3.EZ)
		let da = vec3(wx - w0, wy - w0, wz - w0)
		ang -= da# * 0.000001
	return xang(ang)

func import_frame(p: vec3[], frame_no: int)
	var pos: vec3[]
	var ang: quaternion[]
	for i=>b in model.bone
		pos.add(vec3.0)
		ang.add(quaternion.ID)
	for i=>b in model.bone
		if b.parent < 0
			pos[i] = p[i] - model.bone[i].pos
		else
			let ip = b.parent
			
			# bone vector
			let bdpos = model.bone[i].pos - model.bone[ip].pos
			#bdpos /= bdpos.length()
			let dp = p[i] - p[ip]
			#dp /= dp.length()
#			vector ax = VecCrossProduct(bdpos, dp)
#			ax /= ax.length()
#			float ff = dp.length() / bdpos.length()
#			if ff < 1
#				dp.z = sqrt(bdpos.length_sqr() - dp.length_sqr())
			let q = rot_onto(bdpos, dp)
			ang[ip] = q
	ang[0] = import_torso(p)
			
	for i=>b in model.bone
			model.animation_set_bone(anim_index, frame_no, i, pos[i], ang[i].angles())

#void guess_scale(int[] r, int num_frames, int num_bones)
#	float weight = 0
#	float ss = 0
#	for b,i in model.bone
#		if i >= num_bones
#			break
#		if b.parent < 0
#			continue
#		vector dpos = b.pos - model.bone[b.parent].pos
#		float w = dpos.length()
#		weight += w
#		float ml = 0
#		for f in 0:num_frames
#			int i0 = f*num_bones*2
#			int dx = r[i0 + i*2] - r[i0 + b.parent*2]
#			int dy = r[i0 + i*2+1] - r[i0 + b.parent*2+1]
#			float l = sqrt(dx*dx + dy*dy)
#			ml = max(ml, l)
#		ss += ml
#	scale = ss / weight * 0.8
#	print("scale: " + scale)

func _import(filename: string)
	var f = new TextLinesFormatter(os.fs.open(filename, "rt"))
	var t: string
	var num_bones, num_frames: int
	f >> num_frames
	f >> num_bones
	
	anim_index = 1
	model.begin_action("import-animation")
	model.add_animation(anim_index, Model.Move.Type.SKELETAL)
	model.animation_set_data(anim_index, "new", 5, 0)
	
	var mat = mat4.rotation(vec3(0.30,0,-0.15))
	
	var dlg = new Dialog("", 300, 30, edward, false)
	dlg.add_progress_bar("", 0, 0, "progress")
	dlg.show()
	
	for fi in 0:num_frames
		if fi > 0
			model.animation_add_frame(anim_index, fi, model.move[anim_index].frame[0])
		var p: vec3[]
		for bi in 0:num_bones
			var pp: vec3
			f >> pp
			pp = mat * vec3(pp.x*1.7,-pp.y*1.8,-pp.z)
			p.add(pp)
		import_frame(p, fi)
		#if fi > 10
		#	break
		dlg.set_float("progress", float(fi) / float(num_frames))
		hui.do_single_main_loop()
		#HuiSleep(0.001)
	model.end_action()

func main()
	_import("/home/michi/Projekte/mocap/digest-smooth")
	return
	#if not hui.file_dialog_open(edward, "", "", "*", "*")
	#	return
	#_import(hui.filename)
