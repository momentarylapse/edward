const KABA_LINK = "/usr/lib/libpsmoveapi.so
	_psmove_init:psmove_init
	_psmove_count_connected:psmove_count_connected
	_psmove_reinit:psmove_reinit
	_psmove_connect_by_id:psmove_connect_by_id
	_psmove_connect:psmove_connect
	_psmove_connection_type:psmove_connection_type
	_psmove_disconnect:psmove_disconnect
	_psmove_pair:psmove_pair
	_psmove_get_serial:psmove_get_serial
	_psmove_set_leds:psmove_set_leds
	_psmove_update_leds:psmove_update_leds
	_psmove_set_rumble:psmove_set_rumble
	_psmove_poll:psmove_poll
	_psmove_get_buttons:psmove_get_buttons
	_psmove_get_battery:psmove_get_battery
	_psmove_get_trigger:psmove_get_trigger
	_psmove_enable_orientation:psmove_enable_orientation
	_psmove_has_orientation:psmove_has_orientation
	_psmove_reset_orientation:psmove_reset_orientation
	_psmove_get_accelerometer_frame:psmove_get_accelerometer_frame
	_psmove_get_gyroscope_frame:psmove_get_gyroscope_frame
/usr/lib/libpsmoveapi_tracker.so
	_psmove_tracker_new:psmove_tracker_new
	_psmove_tracker_free:psmove_tracker_free
	_psmove_tracker_set_mirror:psmove_tracker_set_mirror
	_psmove_tracker_set_exposure:psmove_tracker_set_exposure
	_psmove_tracker_enable:psmove_tracker_enable
	_psmove_tracker_update_image:psmove_tracker_update_image
	_psmove_tracker_update:psmove_tracker_update
	_psmove_tracker_update_image:psmove_tracker_update_image
	_psmove_fusion_new:psmove_fusion_new
	_psmove_fusion_free:psmove_fusion_free
	_psmove_fusion_get_position:psmove_fusion_get_position
	_psmove_fusion_get_modelview_matrix:psmove_fusion_get_modelview_matrix"


class PSMoveTracker
class PSMoveFusion
class PSMove

func extern _psmove_count_connected() -> int
func extern _psmove_init(version: int) -> int
func extern _psmove_reinit()

func extern _psmove_connect() -> PSMove*
func extern _psmove_connect_by_id(i: int) -> PSMove*
func extern _psmove_connection_type(p: PSMove*) -> int
func extern _psmove_disconnect(move: PSMove*)
func extern _psmove_get_serial(p: PSMove*) -> char[0]*
func extern _psmove_pair(move: PSMove*) -> int
func extern _psmove_set_leds(p: PSMove*, r: char, g: char, b: char)
func extern _psmove_update_leds(p: PSMove*) -> int
func extern _psmove_set_rumble(p: PSMove*, rumble: char)
func extern _psmove_enable_orientation(p: PSMove*, m: int)
func extern _psmove_has_orientation(p: PSMove*) -> int
func extern _psmove_reset_orientation(p: PSMove*)
func extern _psmove_poll(p: PSMove*) -> int
func extern _psmove_get_buttons(p: PSMove*) -> int
func extern _psmove_get_battery(p: PSMove*) -> int
func extern _psmove_get_trigger(p: PSMove*) -> int
func extern _psmove_get_accelerometer_frame(move: PSMove*, frame: int, ax: float*, ay: float*, az: float*)
func extern _psmove_get_gyroscope_frame(move: PSMove*, frame: int, gx: float*, gy: float*, gz: float*)
# frame 1 = Frame_SecondHalf

func extern _psmove_tracker_new() -> PSMoveTracker*
func extern _psmove_tracker_free(tracker: PSMoveTracker*)
func extern _psmove_tracker_set_mirror(tracker: PSMoveTracker*, m: int)
func extern _psmove_tracker_set_exposure(tracker: PSMoveTracker*, m: int)
func extern _psmove_tracker_enable(tracker: PSMoveTracker*, p: PSMove*) -> int
func extern _psmove_tracker_update(tracker: PSMoveTracker*, move: PSMove*) -> int
func extern _psmove_tracker_update_image(tracker: PSMoveTracker*)

func extern _psmove_fusion_new(tracker: PSMoveTracker*, a: float, b: float) -> PSMoveFusion*
func extern _psmove_fusion_free(fusion: PSMoveFusion*)
func extern _psmove_fusion_get_position(fusion: PSMoveFusion*, psmove: PSMove*, x: float*, y: float*, z: float*)
func extern _psmove_fusion_get_modelview_matrix(fusion: PSMoveFusion*, move: PSMove*) -> matrix*


enum
	Btn_TRIANGLE = 16 # Green triangle
	Btn_CIRCLE = 32 # Red circle
	Btn_CROSS = 64 # Blue cross
	Btn_SQUARE = 128 # Pink square
	Btn_SELECT = 256 # Select button, left side
	Btn_START = 2048 # Start button, right side

	Btn_PS = 65536 # PS button, front center
	Btn_MOVE = 524288 # Move button, big front button
	Btn_T = 1048576 # Trigger, on the back

class MyPSMoveController
	var psmove: PSMove*
	var pos, dpos, pos_last: vector
	var acc, rot, mag: vector
	var col: color
	var ang, dang: quaternion
	var trigger, rumble: float
	var button: bool[8]
	var manager: PsMoveManager*
	func __init__(m: PSMove*, man: PsMoveManager*)
		manager = man
		psmove = m
		_psmove_enable_orientation(m, 1)
		if _psmove_has_orientation(m) == 0
			print(" ERROR: no orientation")
		while _psmove_tracker_enable(manager.tracker, m) != 2 # Tracker_CALIBRATED
			pass
		col = color.BLACK
		rumble = 0
		trigger = 0
		ang = quaternion.ID
		dang = quaternion.ID

	func update()
		if !psmove
			return

		while _psmove_poll(psmove) != 0
			pass

		_psmove_fusion_get_position(manager.fusion, psmove, &pos.x, &pos.y, &pos.z)
		pos.y = - pos.y

		dpos = pos - pos_last
		pos_last = pos

		matrix *mat = _psmove_fusion_get_modelview_matrix(manager.fusion, psmove)
		var s = matrix.scale(1,  1,  -1)
		var q = quaternion(s * *mat * s)
		dang = ang * q
		ang = q.bar()
		#ang = quaternion::rotation_m( *mat)

		_psmove_set_rumble(psmove, int(rumble*255))
		trigger = float(_psmove_get_trigger(psmove)) / 255.0

		_psmove_get_accelerometer_frame(psmove, 1, &acc.x, &acc.y, &acc.z)
		acc.y = - acc.y
		_psmove_get_gyroscope_frame(psmove, 1, &rot.x, &rot.y, &rot.z)
		rot.y = - rot.y

		int _buttons = _psmove_get_buttons(psmove)
		button[0] = ((_buttons & Btn_TRIANGLE) != 0)
		button[1] = ((_buttons & Btn_CIRCLE) != 0)
		button[2] = ((_buttons & Btn_CROSS) != 0)
		button[3] = ((_buttons & Btn_SQUARE) != 0)
		button[4] = ((_buttons & Btn_SELECT) != 0)
		button[5] = ((_buttons & Btn_START) != 0)
		button[6] = ((_buttons & Btn_PS) != 0)
		button[7] = ((_buttons & Btn_MOVE) != 0)

	func reset_orientation()
		_psmove_reset_orientation(psmove)
		ang = quaternion.ID

class PsMoveManager
	var tracker: PSMoveTracker* = nil
	var fusion: PSMoveFusion* = nil
	var psmoves: MyPSMoveController*[]
	func __init__()
		int vv = 262152 #4<<16 + 0<<8 + 8
		if _psmove_init(vv) != 1
			print("VERSION MISMATCH!")
	func __delete()
		psmoves.clear()
		if fusion
			_psmove_fusion_free(fusion)
		if tracker
			_psmove_tracker_free(tracker)
	func connect()
		int n = _psmove_count_connected()
		print("{{n}} found")
		tracker = _psmove_tracker_new()
		fusion = _psmove_fusion_new(tracker, 1., 1000.)
		_psmove_tracker_set_mirror(tracker, 1)
		_psmove_tracker_set_exposure(tracker, 0)
		for i in 0:n
			print("- controller {{i}} -")
			#let p = _psmove_connect()
			var p = _psmove_connect_by_id(i)
			psmoves.add(new MyPSMoveController(p, &self))

	func update()
		if !tracker
			return
		for m in psmoves
			m.update()

		_psmove_tracker_update_image(tracker)
		_psmove_tracker_update(tracker, nil)


func main()
	PsMoveManager m
	m.connect()
	
	while true
		m.update()
