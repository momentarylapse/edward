class Observable
	int dummy
	
class Observer
	//virtual void OnUpdate(Observable o)

class Data : Observable
	string filename
	int file_time
	bool binary_file_format
	int type
	extern void BeginActionGroup(string name)
	extern void EndActionGroup()


// "des Pudels Kern", don't change!!!!!!!
class MultiViewSingleData
	int view_stage
	bool is_selected, m_delta, m_old, is_special
	vector pos



const int MODEL_MAX_TEXTURES = 8
const int MODEL_MAX_POLY_VERTICES_PER_FACE = 16
const int MODEL_MAX_POLY_FACES = 32
const int MODEL_MAX_POLY_EDGES = 32 * 4


const int TransparencyModeDefault = 0-1
const int TransparencyModeNone = 0
const int TransparencyModeFunctions = 1
const int TransparencyModeColorKeyHard = 2
const int TransparencyModeColorKeySmooth = 3
const int TransparencyModeFactor = 4

// effects
enum
	FXKindScript,
	FXKindLight,
	FXKindFog,
	FXKindSound,
	FXKindForceField

class ModelEffect
	int Kind, Surface, Vertex
	int Size, Speed, Intensity
	color Colors[3]
	bool InvQuad
	string File
	void __assign__(ModelEffect other)
		nil

class ModelVertex: MultiViewSingleData
	int NormalMode
	int BoneIndex

	bool NormalDirty
	int RefCount // triangles
	int Surface

class ModelPolygonSide
	int Vertex
	int Edge
	int EdgeDirection // which no of triangle in edge's list are we?
	vector SkinVertex[MODEL_MAX_TEXTURES]
	int NormalIndex
	vector Normal
	char Triangulation[3]

class ModelPolygon: MultiViewSingleData
	ModelPolygonSide Side[]
	vector TempNormal
	bool NormalDirty, TriangulationDirty
	int Material

// only for use in MultiView...
class ModelSkinVertexDummy: MultiViewSingleData

class ModelBall: MultiViewSingleData
	int Index
	float Radius

class ModelPolyhedronFace
	int NumVertices
	int Index[MODEL_MAX_POLY_VERTICES_PER_FACE]
	plane Plane


// TODO: dynamical!
class ModelPolyhedron: MultiViewSingleData
	int NumFaces
	ModelPolyhedronFace Face[MODEL_MAX_POLY_FACES]
	int NumSVertices
	int SIndex[MODEL_MAX_POLY_FACES * MODEL_MAX_POLY_VERTICES_PER_FACE]

	// non redundant edge list!
	int NumEdges
	int EdgeIndex[MODEL_MAX_POLY_EDGES * 2]

	// "topology"
	bool EdgeOnFace[MODEL_MAX_POLY_EDGES * MODEL_MAX_POLY_FACES] // [edge * NumFaces + face]
	int FacesJoiningEdge[MODEL_MAX_POLY_FACES * MODEL_MAX_POLY_FACES] // [face1 * NumFaces + face2]



class ModelTriangle: MultiViewSingleData
	int Vertex[3]
	//int Edge[3]
	//int EdgeDirection[3] // which no of triangle in edge's list are we?
	vector SkinVertex[MODEL_MAX_TEXTURES][3]
	int NormalIndex[3]
	vector Normal[3]
	vector TempNormal
	bool NormalDirty
	int Material


// triangles belonging to one material
class ModelSubSkin
	int NumTextures // "read only" (updated automatically...)

	// triangles
	ModelTriangle Triangle[]


// geometry
class ModelSkin
	// general properties
	int NormalModeAll

	// vertices
	ModelVertex Vertex[]

	// sub skins
	ModelSubSkin Sub[]

class ModelBone: MultiViewSingleData
	int Parent
	vector DeltaPos
	string ModelFile
	Model *model
	bool ConstPos

	// for editing
	matrix Matrix, RotMatrix

class ModelFrame
	// skeleton animation
	vector SkelDPos[]
	vector SkelAng[]

	// vertex animation
	vector DPos[4][]
	vector VertexDPos[]
	void __assign__(ModelFrame other)

class ModelMove
	int Type
	ModelFrame Frame[]
	float FramesPerSecConst, FramesPerSecFactor
	bool InterpolatedQuadratic, InterpolatedLoop
	string Name

class ModelEdge: MultiViewSingleData
	//int NormalMode;
	int Vertex[2]
	int RefCount, Triangle[2], Side[2]
	bool IsRound // for editing
	float Weight // for easify'ing

	// constraints:
	//  Vertex[0] = surf.Triangle[Triangle[0]].Vertex[Side[0]]
	//  Vertex[1] = surf.Triangle[Triangle[0]].Vertex[(Side[0] + 1) % 3]
	//  same for Triangle/Side[1] but Vertex[0 <-> 1]


class ModelSurface: MultiViewSingleData
	ModelPolygon Polygon[]
	ModelEdge Edge[]
	int Vertex[]
	bool IsPhysical, IsVisible
	bool IsClosed

	void *model

class Geometry
	ModelVertex Vertex[]
	ModelPolygon Polygon[]
	ModelEdge Edge[]
	bool IsClosed

class GeometryBall : Geometry
	extern void __init__(vector pos, float radius, int num_x, int num_y)

class GeometryCube : Geometry
	extern void __init__(vector pos, vector dv1, vector dv2, vector dv3, int num_1, int num_2, int num_3)

class GeometryCylinder : Geometry
	extern void __init__(vector pos1, vector pos2, float radius, int rings, int edges, bool closed)

class GeometryCylinderComplex : Geometry
	extern void __init__(vector pos[], float radius[], int rings, int edges, bool closed)

class GeometrySphere : Geometry
	extern void __init__(vector pos, float radius, int num)

class GeometryTorus : Geometry
	extern void __init__(vector pos, vector axis, float radius1, float radius2, int num_x, int num_y)

class GeometryTorusKnot : Geometry
	extern void __init__(vector pos, vector axis, float radius1, float radius2, float radius3, int turns, int twists, int rings, int edges)

class GeometryPlane : Geometry
	extern void __init__(vector pos, vector dv1, vector dv2, int num_x, int num_y)

class GeometryPlatonic : Geometry
	extern void __init__(vector pos, float radius, int samples)


class ModelMaterial
	string MaterialFile
	Material *material
	int NumTextures
	Texture *Texture[MODEL_MAX_TEXTURES]
	string TextureFile[MODEL_MAX_TEXTURES]

	bool UserTransparency
	int TransparencyMode
	int AlphaSource, AlphaDestination
	float AlphaFactor
	bool AlphaZBuffer

	bool UserColor
	color Ambient
	color Diffuse
	color Specular
	color Emission
	float Shininess
	void __assign__(ModelMaterial other)

class ModelMetaData
	// level of detail
	float DetailDist[3]
	int DetailFactor[3]
	bool AutoGenerateDists,AutoGenerateSkin[3]

	// physics
	float Mass
	bool ActivePhysics, PassivePhysics
	bool AutoGenerateTensor
	matrix3 InertiaTensor

	// object-properties
	string Name, Description
	string Inventary[]

	// script
	string ScriptFile
	float ScriptVar[]
	void __assign__(ModelMetaData other)

class DataModel : Data
	
	// properties
	ModelBone Bone[]


	// properties
	ModelMove Move[]
//	ModelMove *move

//	int CurrentMove,CurrentFrame

//	bool Playing,PlayLoop
//	float TimeScale,TimeParam,SimFrame

	// geometry
	ModelVertex Vertex[]
	ModelSurface Surface[]
//	MultiViewSingleData SkinVertex[] // only temporary...
//	int SkinVertMat, SkinVertTL

	// old geometry
	ModelSkin Skin[4]

	// geometry (physical)
	ModelBall Ball[]
	
	//ModelPolyhedron Poly[]

	// general properties
	ModelMaterial Material[]
//	int CurrentMaterial, CurrentTextureLevel
	vector Min, Max

	// effects
	ModelEffect Fx[]

	ModelMetaData meta_data
	
	extern void ClearSelection()
	extern void SelectionFromVertices()
	extern void SelectionFromPolygons()
	extern void SelectionFromSurfaces()
	extern void SelectOnlySurface(ModelSurface s)
	
	extern void AddVertex(vector pos, int bone_index, int normal_mode)
	extern ModelPolygon *AddTriangle(int a, int b, int c, int material)
	extern ModelPolygon *AddPolygon(int v[], int material)
	
	extern void DeleteSelection(bool greedy)
	extern void InvertSelection()
	extern void SubtractSelection()
//	extern void CutOutSelection()
	extern void ConvertSelectionToTriangles()
//	extern void AlignToGridSelection(float grid_d)
//	extern void NearifySelectedVertices()
//	extern void CollapseSelectedVertices()
	extern void BevelSelectedVertices(float radius)
//	extern void FlattenSelectedVertices()
	extern void TriangulateSelectedVertices()
	extern void ExtrudeSelectedPolygons(float offset)
//	extern void AutoWeldSelectedSurfaces(float d)
//	extern void SetNormalModeSelection(int mode)
//	extern void SetNormalModeAll(int mode)
//	extern void SetMaterialSelection(int material)
//	extern void Easify(float factor)
	extern void PasteGeometry(Geometry g, int default_material)
	
	void __assign__(DataModel other)





class WorldTerrain: MultiViewSingleData
	string FileName
	//WorldTerrainVertex Vertex[]
	int VertexBufferSingle
	int ShowTexture
	bool Changed
	Terrain *terrain


class WorldObject: MultiViewSingleData
	string FileName, Name
	Model *object
	vector Ang



class DataWorld: Data
	WorldObject Objects[]
	WorldTerrain Terrains[]
	int EgoIndex

	// actions
	extern WorldObject *AddObject(string filename, vector pos)
	extern WorldTerrain *AddTerrain(string filename, vector pos)
	extern WorldTerrain *AddNewTerrain(vector pos, vector size, int num_x, int num_z)


extern DataModel *data_model
extern DataWorld *data_world
extern Window *edward

extern int GeometrySubtract(Geometry a, Geometry b, Geometry out)
extern int GeometryAnd(Geometry a, Geometry b, Geometry out)

