
class Observable
	int _CPLUSPLUS_CLASS_
	string observable_name

	// observers
	void *observer[]
	string observer_message[]

	// current notifies
	string message_queue[]
	string cur_message
	int notify_level

class Data : Observable
	string filename
	int file_time
	bool binary_file_format
	void *action_manager


// "des Pudels Kern", don't change!!!!!!!
class MultiViewSingleData
	int view_stage
	bool is_selected, m_delta, m_old, is_special
	vector pos




const int MODEL_MAX_TEXTURES = 8
const int MODEL_MAX_POLY_VERTICES_PER_FACE = 16
const int MODEL_MAX_POLY_FACES = 32
const int MODEL_MAX_POLY_EDGES = 32 * 4


const int TransparencyModeDefault = 0-1
const int TransparencyModeNone = 0
const int TransparencyModeFunctions = 1
const int TransparencyModeColorKeyHard = 2
const int TransparencyModeColorKeySmooth = 3
const int TransparencyModeFactor = 4

// effects
enum
	FXKindScript,
	FXKindLight,
	FXKindFog,
	FXKindSound,
	FXKindForceField

class ModelEffect
	int Kind, Surface, Vertex
	int Size, Speed, Intensity
	color Colors[3]
	bool InvQuad
	string File, Function
	void __assign__(ModelEffect other)
		nil

class ModelVertex: MultiViewSingleData
	int NormalMode
	int BoneIndex
	
	vector AnimatedPos

	bool NormalDirty
	int RefCount // triangles
	int Surface

class ModelTriangle: MultiViewSingleData
	int Vertex[3]
	int Edge[3]
	int EdgeDirection[3] // which no of triangle in edge's list are we?
	vector SkinVertex[MODEL_MAX_TEXTURES][3]
	int NormalIndex[3]
	vector Normal[3]
	vector TempNormal
	bool NormalDirty
	int Material

// only for use in MultiView...
class ModelSkinVertexDummy: MultiViewSingleData

class ModelBall: MultiViewSingleData
	int Index
	float Radius

class ModelPolyhedronFace
	int NumVertices
	int Index[MODEL_MAX_POLY_VERTICES_PER_FACE]
	plane Plane


// TODO: dynamical!
class ModelPolyhedron: MultiViewSingleData
	int NumFaces
	ModelPolyhedronFace Face[MODEL_MAX_POLY_FACES]
	int NumSVertices
	int SIndex[MODEL_MAX_POLY_FACES * MODEL_MAX_POLY_VERTICES_PER_FACE]

	// non redundant edge list!
	int NumEdges
	int EdgeIndex[MODEL_MAX_POLY_EDGES * 2]

	// "topology"
	bool EdgeOnFace[MODEL_MAX_POLY_EDGES * MODEL_MAX_POLY_FACES] // [edge * NumFaces + face]
	int FacesJoiningEdge[MODEL_MAX_POLY_FACES * MODEL_MAX_POLY_FACES] // [face1 * NumFaces + face2]


// triangles belonging to one material
class ModelSubSkin
	int NumTextures // "read only" (updated automatically...)

	// triangles
	ModelTriangle Triangle[]


// geometry
class ModelSkin
	// general properties
	int NormalModeAll

	// vertices
	ModelVertex Vertex[]

	// sub skins
	ModelSubSkin Sub[]

class ModelBone: MultiViewSingleData
	int Parent
	vector DeltaPos
	string ModelFile
	model model
	bool ConstPos

	// for editing
	matrix Matrix, RotMatrix

class ModelFrame
	// skeleton animation
	vector SkelDPos[]
	vector SkelAng[]

	// vertex animation
	vector DPos[4][]
	vector VertexDPos[]
	void __assign__(ModelFrame other)

class ModelMove
	int Type
	ModelFrame Frame[]
	float FramesPerSecConst, FramesPerSecFactor
	bool InterpolatedQuadratic, InterpolatedLoop
	string Name

class ModelEdge: MultiViewSingleData
	//int NormalMode;
	int Vertex[2]
	int RefCount, Triangle[2], Side[2]
	bool IsRound // for editing
	float Weight // for easify'ing

	// constraints:
	//  Vertex[0] = surf.Triangle[Triangle[0]].Vertex[Side[0]]
	//  Vertex[1] = surf.Triangle[Triangle[0]].Vertex[(Side[0] + 1) % 3]
	//  same for Triangle/Side[1] but Vertex[0 <-> 1]


class ModelSurface: MultiViewSingleData
	ModelTriangle Triangle[]
	ModelEdge Edge[]
	int Vertex[]
	bool IsPhysical, IsVisible
	bool IsClosed

	void *model


class ModelMaterial
	string MaterialFile
	Material *material
	int NumTextures
	int Texture[MODEL_MAX_TEXTURES]
	string TextureFile[MODEL_MAX_TEXTURES]

	bool UserTransparency
	int TransparencyMode
	int AlphaSource, AlphaDestination
	float AlphaFactor
	bool AlphaZBuffer

	bool UserColor
	color Ambient
	color Diffuse
	color Specular
	color Emission
	float Shininess
	void __assign__(ModelMaterial other)

class ModelMetaData
	// level of detail
	float DetailDist[3]
	int DetailFactor[3]
	bool AutoGenerateDists,AutoGenerateSkin[3]

	// physics
	float Mass
	bool ActivePhysics, PassivePhysics
	bool AutoGenerateTensor
	matrix3 InertiaTensor

	// object-properties
	string Name, Description
	string Inventary[]

	// script
	string ScriptFile
	float ScriptVar[]
	void __assign__(ModelMetaData other)

class sAutoTexturingData
	bool enabled
	// linear
	vector p0, dir_u, dir_v
	int prev_material

class DataModel : Data
	sAutoTexturingData AutoTexturingData
	
	// properties
	ModelBone Bone[]


	// properties
	ModelMove Move[]
	ModelMove *move

	int CurrentMove,CurrentFrame

	bool Playing,PlayLoop
	float TimeScale,TimeParam,SimFrame

	bool ShowSkeleton


	bool TextureMVNeedsUpdate
	int NewRootPoint

	// geometry
	ModelVertex Vertex[]
	ModelSurface Surface[]
	int NormalModeAll
	MultiViewSingleData SkinVertex[] // only temporary...
	int SkinVertMat, SkinVertTL

	// old geometry
	ModelSkin Skin[4]

	// geometry (physical)
	ModelBall Ball[]
	ModelPolyhedron Poly[]

	// general properties
	ModelMaterial Material[]
	int CurrentMaterial, CurrentTextureLevel
	vector Min, Max

	// effects
	ModelEffect Fx[]

	ModelMetaData meta_data
	extern void AddVertex(vector pos, int bone_index, int normal_mode)
	extern ModelTriangle *AddTriangle(int a, int b, int c)
	extern ModelSurface *AddBall(vector pos, float radius, int num_x, int num_y, bool as_sphere)
	extern ModelSurface *AddPlane(vector pos, vector dv1, vector dv2, int num_x, int num_y)
	extern ModelSurface *AddCube(vector pos, vector dv1, vector dv2, vector dv3, int num_1, int num_2, int num_3)
	extern ModelSurface *AddCylinder(vector pos[], float radius[], int rings, int edges, bool closed)
	extern void BeginActionGroup()
	extern void EndActionGroup()
	void __assign__(DataModel other)





class WorldTerrain: MultiViewSingleData
	int _TODO_



class WorldObject: MultiViewSingleData
	string FileName, Name
	model object
	vector Ang



class DataWorld: Data
	int _TODO_

	// actions
	extern WorldObject *AddObject(string filename, vector pos)
	extern WorldTerrain *AddTerrainLoad(string filename, vector pos)
	extern WorldTerrain *AddTerrain(vector pos, vector size, int num_x, int num_z)
	extern void BeginActionGroup()
	extern void EndActionGroup()



extern DataModel *data_model
extern DataWorld *data_world
extern window edward

/*void main()
	print "dm: " + data_model
	print "dm.Bone: " + &(data_model.Bone)
	print "dm.obs_name: " + &(data_model.observable_name)
	print "dm.filename: " + &(data_model.filename)
	print data_model.observable_name
	print data_model.filename
	print "bone: " + data_model.Bone.num
	print "vertex: " + data_model.Vertex.num
	print "surf: " + data_model.Surface.num*/

/*class TestClass
	string name
	int i
	extern void func()

extern TestClass test
extern string TestVar
extern void TestFunc()

void main()
	print "test"
	print TestVar
	TestFunc()
	print test.name
	print test.i
	test.func()*/
