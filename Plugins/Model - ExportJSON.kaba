use "api.kaba"

string vecToJson(vector v)
	return "" + v.x + ", " + v.y + ", " + v.z

string col3ToJson(color c)
	return "" + c.r + ", " + c.g + ", " + c.b

string qToJson(quaternion q)
	return "" + q.x + ", " + q.y + ", " + q.z + ", " + q.w

string materialToJson(ModelMaterial m)
	string str
	str += "	{\n"
	str += "		'DbgColor' : 15658734,\n"
	str += "		'DbgIndex' : 0,\n"
	str += "		'DbgName' : 'Test',\n"
	str += "		'blending' : 'NormalBlending',\n"
	str += "		'colorAmbient' : [" + col3ToJson(m.Ambient) + "],\n"
	str += "		'colorDiffuse' : [" + col3ToJson(m.Diffuse) + "],\n"
	str += "		'colorSpecular' : [" + col3ToJson(m.Specular) + "],\n"
	str += "		'depthTest' : true,\n"
	str += "		'depthWrite' : true,\n"
	str += "		'shading' : 'Phong',\n"
	str += "		'specularCoef' : " + m.Shininess + ",\n"
	str += "		'transparency' : 1.0,\n"
	str += "		'transparent' : false,\n"
	str += "		'vertexColors' : false\n"
	str += "	}"
	return str

string moveToJson(ModelMove m)
	string str
	str += "	{\n"
	str += "		'name': '" + m.Name + "',\n"
	str += "		'fps': " + m.FramesPerSecConst + ",\n"
	str += "		'length': " + (m.Frame.num / m.FramesPerSecConst) + ",\n"
	str += "		'hierarchy': [\n"
	for int i, 0, data_model.Bone.num
		str += "			{\n"
		str += "				'parent': " + data_model.Bone[i].Parent + ",\n"
		str += "				'keys': [\n"
		for int j, 0, m.Frame.num
			quaternion q
			QuaternionRotationV(q, m.Frame[j].SkelAng[i])
			str += "					{\n"
			str += "						'time': " + (j / m.FramesPerSecConst) + ",\n"
			str += "						'pos': [0,0,0],\n"
			str += "						'rot': [" + qToJson(q) + "],\n"
			str += "						'scl': [1,1,1]\n"
			str += "					},\n"
		QuaternionRotationV(q, m.Frame[0].SkelAng[i])
		str += "					{\n"
		str += "						'time': " + (m.Frame.num / m.FramesPerSecConst) + ",\n"
		str += "						'pos': [0,0,0],\n"
		str += "						'rot': [" + qToJson(q) + "],\n"
		str += "						'scl': [1,1,1]\n"
		str += "					}\n"
		str += "				]\n"
		if i < data_model.Bone.num - 1
			str += "			},\n"
		else
			str += "			}\n"
	str += "		]\n"
	str += "	}"
	return str

string boneToJson(ModelBone b)
	string str
	str += "	{\n"
	str += "		'parent': " + b.Parent + ",\n"
	str += "		'name': 'xxx',\n"
	str += "		'pos': [" + b.pos.x + ", " + b.pos.y + ", " + b.pos.z + "],\n"
	str += "		'scl': [1,1,1],\n"
	str += "		'rot': [0,0,0],\n"
	str += "		'rotq': [0,0,0,1]\n"
	str += "	}"
	return str

void main()
	if !HuiFileDialogSave(edward, "Save JSON", "", "*.js", "*.js")
		return
	File *f = FileCreate(HuiFilename)
	
	int n_tria = 0
	for int is, 0, data_model.Surface.num
		ModelSurface *s = &data_model.Surface[is]
		for int ip, 0, s.Polygon.num
			ModelPolygon *p = &s.Polygon[ip]
			n_tria += p.Side.num - 2
	
	string str = "{'metadata':{\n"
	str += "	'formatVersion': 3,\n"
	str += "	'generatedBy': 'Edward',\n"
	str += "	'vertices': " + data_model.Vertex.num + ",\n"
	str += "	'faces': " + n_tria + ",\n"
	str += "	'normals': " + (n_tria*3) + ",\n"
	str += "	'colors': 0,\n"
	str += "	'uvs': 1,\n"
	str += "	'morphTargets': 0,\n"
	str += "	'bones': " + data_model.Bone.num + "\n"
	str += "},\n"
	str += "'influencesPerVertex': 1,\n"
	str += "'scale': 1.000,\n"
	/*str += "'materials': [\n"
	str += "	{\n"
	str += "		'DbgColor' : 15658734,\n"
	str += "		'DbgIndex' : 0,\n"
	str += "		'DbgName' : 'Michi 1',\n"
	str += "		'blending' : 'NormalBlending',\n"
	str += "		'colorAmbient' : [0.75, 0.75, 0.75],\n"
	str += "		'colorDiffuse' : [1.0, 1.0, 1.0],\n"
	str += "		'colorSpecular' : [0.5, 0.5, 0.5],\n"
	str += "		'depthTest' : true,\n"
	str += "		'depthWrite' : true,\n"
	str += "		'shading' : 'Phong',\n"
	str += "		'specularCoef' : 50,\n"
	str += "		'transparency' : 1.0,\n"
	str += "		'transparent' : false,\n"
	str += "		'vertexColors' : false\n"
	str += "	}],\n"*/
	str += "'materials': [\n"
	for int i, 0, data_model.Material.num
		str += materialToJson(data_model.Material[i])
		if i < data_model.Material.num - 1
			str += ",\n"
	str += "],\n"
	str += "'colors': [],\n"
	str += "'vertices': [\n"
	for int i, 0, data_model.Vertex.num
		vector v = data_model.Vertex[i].pos
		str += "	" + vecToJson(v)
		if i < data_model.Vertex.num - 1
			str += ",\n"
	str += "],\n"
	str += "'uvs': [[0,0]],\n"
	str += "'normals': [\n"
	for int is, 0, data_model.Surface.num
		ModelSurface *s = &data_model.Surface[is]
		for int ip, 0, s.Polygon.num
			ModelPolygon *p = &s.Polygon[ip]
			for int k, 0, p.Side.num
				vector n = p.Side[k].Normal
				str += "	" + vecToJson(n)
				if (is < data_model.Surface.num - 1) or (ip < s.Polygon.num - 1) or (k < p.Side.num - 1)
					str += ",\n"
	str += "],\n"
	str += "'faces': [\n"
	int n_normals = 0
	for int is, 0, data_model.Surface.num
		ModelSurface *s = &data_model.Surface[is]
		for int ip, 0, s.Polygon.num
			ModelPolygon *p = &s.Polygon[ip]
			for int k, 0, p.Side.num - 2
				int a = p.Side[k].Triangulation[0]
				int b = p.Side[k].Triangulation[1]
				int c = p.Side[k].Triangulation[2]
				int va = p.Side[a].Vertex
				int vb = p.Side[b].Vertex
				int vc = p.Side[c].Vertex
				int na = n_normals + a
				int nb = n_normals + b
				int nc = n_normals + c
				vector n = p.TempNormal
				str += "	42, " + va + ", " + vb + ", " + vc + ", " + p.Material + ", "
				str += "0, 0, 0, "
				str += "" + na + ", " + nb + ", " + nc
				if (is < data_model.Surface.num - 1) or (ip < s.Polygon.num - 1) or (k < p.Side.num - 3)
					str += ",\n"
			n_normals += p.Side.num
	str += "],\n"
	/*str += "'morphTargets': [\n"
	for int i, 0, data_model.Move.num
		str += moveToJson(data_model.Move[i])
		if i < data_model.Move.num - 1
			str += ",\n"
	str += "],\n"*/
	str += "'bones': [\n"
	for int i, 0, data_model.Bone.num
		str += boneToJson(data_model.Bone[i])
		if i < data_model.Bone.num - 1
			str += ",\n"
	str += "],\n"
	str += "'skinIndices': ["
	for int i, 0, data_model.Vertex.num
		str += data_model.Vertex[i].BoneIndex
		if i < data_model.Vertex.num - 1
			str += ", "
	str += "],\n"
	str += "'skinWeights': ["
	for int i, 0, data_model.Vertex.num
		str += "1"
		if i < data_model.Vertex.num - 1
			str += ", "
	str += "],\n"
	str += "'animations': [\n"
	for int i, 0, data_model.Move.num
		print i
		str += moveToJson(data_model.Move[i])
		if i < data_model.Move.num - 1
			str += ",\n"
	str += "]\n"
	str += "}"
	str = str.replace("'", "\"")
	f << str
	delete f
