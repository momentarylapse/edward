use hui
use gl
use os
#import x

class Observable
	var dummy: int
	
class Observer
	#virtual void OnUpdate(Observable o)

class Data extends Observable
	var filename: Path
	var file_time: int
	var binary_file_format: bool
	var type: int
	func extern begin_action(name: string)
	func extern end_action()



class MultiView
		
	enum Action
		SELECT
		MOVE
		ROTATE
		ROTATE_2D
		SCALE
		SCALE_2D
		MIRROR
		ONCE

	enum ActionConstraints
		NONE
		X
		Y
		Z
		XY
		XZ
		YZ

	class ActionController
		func extern start_action(win: MultiView.Window*, m: vector, constraints: ActionConstraints)
		func extern update_action()
		func extern update_param(param: vector)
		func extern end_action(set: bool)
		var pos: vector

	class Window
		var local_ang: quaternion

	class Camera
		var pos: vector
		var ang: quaternion

	# "des Pudels Kern", don't change!!!!!!!
	class SingleData
		var view_stage: int
		var is_selected, m_delta, m_old, is_special: bool
		var pos: vector

		
	#extern void on_mouse_move()
	#extern void set_mouse_action(string name, int type, bool locked) #"ActionModelAnimationTransformBones", mouse_action, false);
	var action_con: ActionController*
	var mouse_win: MultiView.Window*
	var active_win: MultiView.Window*
	var cam: MultiView.Camera
	func extern cam_move(dpos: vector)
	func extern cam_rotate(dq: quaternion, cam_center: bool)
	func extern cam_zoom(factor: float, mouse_rel: bool)



const TransparencyModeDefault = -1
const TransparencyModeNone = 0
const TransparencyModeFunctions = 1
const TransparencyModeColorKeyHard = 2
const TransparencyModeColorKeySmooth = 3
const TransparencyModeFactor = 4

# effects
enum FxKind
	Script,
	Light,
	Fog,
	Sound,
	ForceField

class y
	class Material
		var shader: gl.Shader*
	class Terrain
	class Model



class Model extends Data
	const MAX_TEXTURES = 8
	const MAX_POLY_VERTICES_PER_FACE = 16
	const MAX_POLY_FACES = 32
	const MAX_POLY_EDGES = 32 * 4


	class Material
		var filename: Path
		var material: y.Material*
		var num_textures: int
		var texture: Texture*[Model.MAX_TEXTURES]
		var texture_file: string[Model.MAX_TEXTURES]

		var user_transparency: bool
		var transparency_mode: int
		var alpha_source, alpha_destination: int
		var alpha_factor: float
		var alpha_z_buffer: bool

		var user_color: bool
		var ambient: color
		var diffuse: color
		var specular: color
		var emission: color
		var shininess: float
		func __assign__(other: Material)

	class Effect
		var kind, surface, vertex: int
		var size, speed, intensity: int
		var colors: color[3]
		var inv_quad: bool
		var file: string
		func __assign__(other: Effect)
			nil


	# only for use in MultiView...
	class SkinVertexDummy extends MultiView.SingleData

	class Ball extends MultiView.SingleData
		var index: int
		var radius: float


	# TODO: dynamical!
	class Polyhedron extends MultiView.SingleData
		class Face
			var num_vertices: int
			var index: int[Model.MAX_POLY_VERTICES_PER_FACE]
			var plane: plane
		var num_faces: int
		var face: Face[Model.MAX_POLY_FACES]
		var num_svertices: int
		var sindex: int[Model.MAX_POLY_FACES * Model.MAX_POLY_VERTICES_PER_FACE]

		# non redundant edge list!
		var num_edges: int
		var edge_index: int[Model.MAX_POLY_EDGES * 2]

		# "topology"
		var edge_on_face: bool[Model.MAX_POLY_EDGES * Model.MAX_POLY_FACES] # [edge * NumFaces + face]
		var faces_joining_edge: int[Model.MAX_POLY_FACES * Model.MAX_POLY_FACES] # [face1 * NumFaces + face2]



	class Triangle extends MultiView.SingleData
		var vertex: int[3]
		#int[3] edge
		#int[3] edge_direction # which no of triangle in edge's list are we?
		var skin_vertex: vector[Model.MAX_TEXTURES][3]
		var normal_index: int[3]
		var normal: vector[3]
		var temp_normal: vector
		var normal_dirty: bool
		var material: int


	# triangles belonging to one material
	class SubSkin
		var num_textures: int

		# triangles
		var triangle: Triangle[]


	# geometry
	class Skin
		# general properties
		var normal_mode_all: int

		# vertices
		var vertex: Geometry.Vertex[]

		# sub skins
		var sub: SubSkin[]

	class Bone extends MultiView.SingleData
		var parent: int
		var model_file: string
		var model: Model*
		var const_pos: bool

		# for editing
		var matrix: matrix
		func __init__()



	class Move
		enum Type
			NONE
			VERTEX
			SKELETAL

		class Frame
			# skeleton animation
			var skel_dpos: vector[]
			var skel_ang: vector[]

			# vertex animation
			var dpos: vector[4][]
			var vertex_dpos: vector[]
			func __assign__(other: Frame)
		
		var type: int
		var frame: Frame[]
		var frames_per_sec_const, frames_per_sec_factor: float
		var name: string

	class Edge extends MultiView.SingleData
		#int NormalMode;
		var vertex: int[2]
		var ref_count: int
		var triangle, side: int[2]
		var is_round: bool
		var weight: float

		# constraints:
		#  Vertex[0] = surf.Triangle[Triangle[0]].Vertex[Side[0]]
		#  Vertex[1] = surf.Triangle[Triangle[0]].Vertex[(Side[0] + 1) % 3]
		#  same for Triangle/Side[1] but Vertex[0 <-> 1]


	class __Surface extends MultiView.SingleData
		var polygon: Geometry.Polygon[]
		var edge: Edge[]
		var vertex: int[]
		var is_physical, is_visible: bool
		var is_closed: bool

		var model: void*
		func __init__()

	class MetaData
		# level of detail
		var detail_dist: float[3]
		var detail_factor: int[3]
		var auto_generate_dists: bool
		var auto_generate_skin: bool[3]

		# physics
		var mass: float
		var active_physics, passive_physics: bool
		var auto_generate_tensor: bool
		var inertia_tensor: matrix3

		# object-properties
		var name, description: string
		var inventary: Path[]

		# script
		var script_file: Path
		var script_var: float[]
		func __assign__(other: MetaData)

	class Selection
		var vertex, polygon, edge: int[]

	class Mesh
		var vertex: Geometry.Vertex[]
		var polygon: Geometry.Polygon[]
		var edge: Edge[]
	
		# geometry (physical)
		var ball: Ball[]
	
	# properties
	var bone: Bone[]


	# properties
	var move: Model.Move[]

#	int CurrentMove,CurrentFrame

#	bool Playing,PlayLoop
#	float TimeScale,TimeParam,SimFrame

	# geometry
	var mesh: Mesh*
	var phys_mesh: Mesh*
#	MultiViewSingleData SkinVertex[] # only temporary...
#	int SkinVertMat, SkinVertTL

	# old geometry
	var skin: Skin[4]

	
	#ModelPolyhedron Poly[]

	# general properties
	var material: Material[]

	# effects
	var fx: Effect[]

	var meta_data: MetaData
	
	func extern clear_selection()
	func extern selection_from_vertices()
	func extern selection_from_polygons()
	#extern void SelectOnlySurface(ModelSurface s)
	
	func extern add_vertex(pos: vector, bone_index: int, normal_mode: int)
	func extern add_triangle(a: int, b: int, c: int, material: int) -> Geometry.Polygon*
	func extern add_polygon(v: int[], material: int) -> Geometry.Polygon*
	func extern delete_polygon(index: int)
	
	func extern delete_selection(s: Selection, greedy: bool)
	func extern invert_polygons(s: Selection)
	func extern subtract_selection()
#	extern void CutOutSelection()
	func extern convert_selection_to_triangles()
#	extern void AlignToGridSelection(float grid_d)
#	extern void NearifySelectedVertices()
#	extern void CollapseSelectedVertices()
	func extern bevel_selected_vertices(radius: float)
#	extern void FlattenSelectedVertices()
	func extern triangulate_selected_vertices()
	func extern extrude_selected_polygons(offset: float)
#	extern void AutoWeldSelectedSurfaces(float d)
#	extern void SetNormalModeSelection(int mode)
#	extern void SetNormalModeAll(int mode)
#	extern void SetMaterialSelection(int material)
#	extern void Easify(float factor)
	func extern paste_geometry(g: Geometry, default_material: int)
	
	func extern add_animation(index: int, type: Move.Type)
	func extern duplicate_animation(source: int, target: int)
	func extern delete_animation(index: int)
	func extern animation_set_data(index: int, name: string, fps_const: float, fps_factor: float)
	func extern animation_add_frame(index: int, frame: int, f: Move.Frame)
	func extern animation_delete_frame(index: int, frame: int)
	func extern animation_set_frame_duration(index: int, frame: int, duration: float)
	func extern animation_set_bone(move: int, frame: int, bone: int, dpos: vector, ang: vector)
	
	func __assign__(other: Model)


class Geometry
	class Vertex extends MultiView.SingleData
		var normal_mode: int
		var bone_index: int

		var normal_dirty: bool
		var ref_count: int
		var surface: int

	class Polygon extends MultiView.SingleData
		class Side
			var vertex: int
			var edge: int
			var edge_direction: int
			var skin_vertex: vector[Model.MAX_TEXTURES]
			var normal_index: int
			var normal: vector
			var triangulation: char[3]
		var side: Side[]
		var temp_normal: vector
		var normal_dirty, triangulation_dirty: bool
		var material: int
		func __init__()
		
	var vertex: Vertex[]
	var polygon: Polygon[]
	var edge: Model.Edge[]
	var is_closed: bool
	
	func extern static subtract(a: Geometry, b: Geometry, out _out: Geometry) -> int
	func extern static and(a: Geometry, b: Geometry, out _out: Geometry) -> int

	enum EndMode
		OPEN
		FLAT
		ROUND
		LOOP

	class Ball extends Geometry
		func extern __init__(pos: vector, radius: float, num_x: int, num_y: int)

	class Cube extends Geometry
		func extern __init__(pos: vector, dv1: vector, dv2: vector, dv3: vector, num_1: int, num_2: int, num_3: int)

	class Cylinder extends Geometry
		func extern __init__(pos1: vector, pos2: vector, radius: float, rings: int, edges: int, end_mode: EndMode)

	class CylinderComplex extends Geometry
		func extern __init__(pos: vector[], radius: float[], rings: int, edges: int, end_mode: EndMode)

	class Sphere extends Geometry
		func extern __init__(pos: vector, radius: float, num: int)

	class Torus extends Geometry
		func extern __init__(pos: vector, axis: vector, radius1: float, radius2: float, num_x: int, num_y: int)

	class TorusKnot extends Geometry
		func extern __init__(pos: vector, axis: vector, radius1: float, radius2: float, radius3: float, turns: int, twists: int, rings: int, edges: int)

	class Plane extends Geometry
		func extern __init__(pos: vector, dv1: vector, dv2: vector, num_x: int, num_y: int)

	class Platonic extends Geometry
		func extern __init__(pos: vector, radius: float, samples: int)




class World extends Data


	class Terrain extends MultiView.SingleData
		var filename: Path
		#WorldTerrainVertex Vertex[]
		var vertex_buffer_single: int
		var show_texture: int
		var changed: bool
		var terrain: y.Terrain*
		func __init__()


	class Object extends MultiView.SingleData
		var filename: string
		var name: string
		var object: y.Model*
		var ang: vector
		func __init__()


	var objects: Object[]
	var terrains: Terrain[]
	var ego_index: int

	# actions
	func extern add_object(filename: Path, pos: vector) -> Object*
	func extern add_terrain(filename: Path, pos: vector) -> Terrain*
	func extern add_new_terrain(pos: vector, size: vector, num_x: int, num_z: int) -> Terrain*


class Mode
	var name: string
	var multi_view: MultiView*

class Edward
	var cur_mode: Mode*

class shader
	enum Type
		FLOAT
		INT
		VEC2
		VEC3
		COLOR
		LITERAL # ...

	class BuilderContext
		func extern create_temp(source: Node, port: int, type: Type) -> string
		func extern create_out(source: Node, port: int) -> string
		func extern find_temp(source: Node, port: int, wanted_type: int) -> string
		func extern build_value(n: Node, i: int, internal: string) -> string
		func value(n: Node, i: int) -> string
			return build_value(n, i, "")
		func extern build_const(n: Node, i: int) -> string

	class Node extends Object
		func extern __init__(t: string)
		func extern override __delete__()
		func __assign__(n: Node)
			pass
		var x, y: int
		var type: string
	
		class Parameter
			var type: Type
			var name: string
			var value: string
			var options: string
			func __init__()
			func __init__(t: Type, n: string, v: string, o: string)
				type = t
				name = n
				value = v
				options = o
		var params: Parameter[]


		class Port
			var type: Type
			var name: string
			func __init__()
			func __init__(t: Type, n: string)
				type = t
				name = n
		var output: Port[]
	
		func extern virtual const dependencies() -> string[]
		func extern virtual const uniform_dependencies() -> string[]
		func extern virtual const code_pixel(out ctx: BuilderContext) -> string

var extern model: Model*
var extern world: World*
var extern edward: Window*
var extern ed: Edward*

