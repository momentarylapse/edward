use hui
use file
use "../api.kaba"

string vecToJson(vector v)
	return "{{v.x}}, {{v.y}}, {{v.z}}"

string col3ToJson(color c)
	return "{{c.r}}, {{c.g}}, {{c.b}}"

string qToJson(quaternion q)
	return "{{q.x}}, {{q.y}}, {{q.z}}, {{q.w}}"

string materialToJson(ModelMaterial m)
	string str
	str += "	{\n"
	str += "		'DbgColor' : 15658734,\n"
	str += "		'DbgIndex' : 0,\n"
	str += "		'DbgName' : 'Test',\n"
	str += "		'blending' : 'NormalBlending',\n"
	str += "		'colorAmbient' : [{{col3ToJson(m.ambient)}}],\n"
	str += "		'colorDiffuse' : [{{col3ToJson(m.diffuse)}}],\n"
	str += "		'colorSpecular' : [{{col3ToJson(m.specular)}}],\n"
	str += "		'depthTest' : true,\n"
	str += "		'depthWrite' : true,\n"
	str += "		'shading' : 'Phong',\n"
	str += "		'specularCoef' : {{m.shininess}},\n"
	str += "		'transparency' : 1.0,\n"
	str += "		'transparent' : false,\n"
	str += "		'vertexColors' : false\n"
	str += "	}"
	return str

vector bone_anim_pos(ModelFrame f, int i)
	int parent = data_model.bone[i].parent
	if parent >= 0
		vector dpos = data_model.bone[i].pos - data_model.bone[parent].pos
		let q = quaternion.rotation_v(f.skel_ang[parent])
		return bone_anim_pos(f, parent) + q * dpos
	return f.skel_dpos[i] + data_model.bone[i].pos

string moveToJson(ModelMove m)
	string str
	str += "	{\n"
	str += "		'name': '{{m.name}}',\n"
	str += "		'fps': {{m.frames_per_sec_const}},\n"
	str += "		'length': {{(m.frame.num / m.frames_per_sec_const)}},\n"
	str += "		'hierarchy': [\n"
	for b,i in data_model.bone
		str += "			{\n"
		str += "				'parent': -1,\n" #b.parent
		str += "				'keys': [\n"
		for f,j in m.frame
			let q = quaternion.rotation_v(f.skel_ang[i])
			let dpos = bone_anim_pos(f, i) # - b.pos
#			if b.parent >= 0
#				let dq = QuaternionRotationV(f.skel_ang[b.parent])
#				#dpos -= dq * bone_anim_pos(f, b.parent)
#				q *= dq.bar()
			print(dpos)
			str += "					{\n"
			str += "						'time': {{(j / m.frames_per_sec_const)}},\n"
			str += "						'pos': [{{vecToJson(dpos)}}],\n"
			str += "						'rot': [{{qToJson(q)}}],\n"
			str += "						'scl': [1,1,1]\n"
			str += "					},\n"
		# looping...
		let q = quaternion.rotation_v(m.frame[0].skel_ang[i])
		str += "					{\n"
		str += "						'time': {{(m.frame.num / m.frames_per_sec_const)}},\n"
		str += "						'pos': [0,0,0],\n"
		str += "						'rot': [{{qToJson(q)}}],\n"
		str += "						'scl': [1,1,1]\n"
		str += "					}\n"
		str += "				]\n"
		if i < data_model.bone.num - 1
			str += "			},\n"
		else
			str += "			}\n"
	str += "		]\n"
	str += "	}"
	return str

string boneToJson(ModelBone b)
	string str
	str += "	{\n"
	str += "		'parent': -1,\n" #b.parent
	vector pos = b.pos
	#if b.parent >= 0
#		pos -= data_model.bone[b.parent].pos
	str += "		'name': 'xxx',\n"
	str += "		'pos': [{{vecToJson(pos)}}],\n"
	str += "		'scl': [1,1,1],\n"
	str += "		'rot': [0,0,0],\n"
	str += "		'rotq': [0,0,0,1]\n"
	str += "	}"
	return str

void main()
	if !FileDialogSave(edward, "Save JSON", "", "*.js", "*.js")
		return
	File *f = Filesystem.create_text(HuiFilename)
	
	int n_tria = 0
	for s in data_model.surface
		for p in s.polygon
			n_tria += p.side.num - 2
	
	string str = "{'metadata':{\n"
	str += "	'formatVersion': 3,\n"
	str += "	'generatedBy': 'Edward',\n"
	str += "	'vertices': {{data_model.vertex.num}},\n"
	str += "	'faces': {{n_tria}},\n"
	str += "	'normals': {{(n_tria*3)}},\n"
	str += "	'colors': 0,\n"
	str += "	'uvs': 1,\n"
	str += "	'morphTargets': 0,\n"
	str += "	'bones': {{data_model.bone.num}}\n"
	str += "},\n"
	str += "'influencesPerVertex': 1,\n"
	str += "'scale': 1.000,\n"
#	str += "'materials': [\n"
#	str += "	{\n"
#	str += "		'DbgColor' : 15658734,\n"
#	str += "		'DbgIndex' : 0,\n"
#	str += "		'DbgName' : 'Michi 1',\n"
#	str += "		'blending' : 'NormalBlending',\n"
#	str += "		'colorAmbient' : [0.75, 0.75, 0.75],\n"
#	str += "		'colorDiffuse' : [1.0, 1.0, 1.0],\n"
#	str += "		'colorSpecular' : [0.5, 0.5, 0.5],\n"
#	str += "		'depthTest' : true,\n"
#	str += "		'depthWrite' : true,\n"
#	str += "		'shading' : 'Phong',\n"
#	str += "		'specularCoef' : 50,\n"
#	str += "		'transparency' : 1.0,\n"
#	str += "		'transparent' : false,\n"
#	str += "		'vertexColors' : false\n"
#	str += "	}],\n"
	str += "'materials': [\n"
	for m,i in data_model.material
		str += materialToJson(m)
		if i < data_model.material.num - 1
			str += ",\n"
	str += "],\n"
	str += "'colors': [],\n"
	str += "'vertices': [\n"
	for v,i in data_model.vertex
		str += "	" + vecToJson(v.pos)
		if i < data_model.vertex.num - 1
			str += ",\n"
	str += "],\n"
	str += "'uvs': [[0,0]],\n"
	str += "'normals': [\n"
	for s,is in data_model.surface
		for p,ip in s.polygon
			for side,k in p.side
				str += "	" + vecToJson(side.normal)
				if (is < data_model.surface.num - 1) or (ip < s.polygon.num - 1) or (k < p.side.num - 1)
					str += ",\n"
	str += "],\n"
	str += "'faces': [\n"
	int n_normals = 0
	for s,is in data_model.surface
		for p,ip in s.polygon
			for side,k in p.side
				int _a = side.triangulation[0]
				int _b = side.triangulation[1]
				int _c = side.triangulation[2]
				int va = p.side[_a].vertex
				int vb = p.side[_b].vertex
				int vc = p.side[_c].vertex
				int na = n_normals + _a
				int nb = n_normals + _b
				int nc = n_normals + _c
				vector n = p.temp_normal
				str += "	42, {{va}}, {{vb}}, {{vc}}, {{p.material}}, "
				str += "0, 0, 0, "
				str += "{{na}}, {{nb}}, {{nc}}"
				if (is < data_model.surface.num - 1) or (ip < s.polygon.num - 1) or (k < p.side.num - 1)
					str += ",\n"
			n_normals += p.side.num
	str += "],\n"
#	str += "'morphTargets': [\n"
#	for int i, 0, data_model.Move.num
#		str += moveToJson(data_model.Move[i])
#		if i < data_model.Move.num - 1
#			str += ",\n"
#	str += "],\n"
	str += "'bones': [\n"
	for b,i in data_model.bone
		str += boneToJson(b)
		if i < data_model.bone.num - 1
			str += ",\n"
	str += "],\n"
	str += "'skinIndices': ["
	for v,i in data_model.vertex
		str += v.bone_index
		if i < data_model.vertex.num - 1
			str += ", "
	str += "],\n"
	str += "'skinWeights': ["
	for v,i in data_model.vertex
		str += "1"
		if i < data_model.vertex.num - 1
			str += ", "
	str += "],\n"
	str += "'animations': [\n"
	bool first_anim = true
	for m,i in data_model.move
		if len(m.frame) == 0
			continue
		if !first_anim
			str += ",\n"
		str += moveToJson(m)
		first_anim = false
	str += "]\n"
	str += "}"
	str = str.replace("'", "\"")
	f << str
	delete f
