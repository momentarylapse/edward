use edward

const MAX_LENGTH = 12
const BRANCH_PROB = 2.8
const BRANCH_FACTOR = 0.7
const BRANCH_ANGLE = 0.5
const DIR_RAND = 0.2

func get_rotated(dir: vec3) -> vec3
	var v1 = vec3.cross(dir, vec3.EX).normalized()
	var v2 = vec3.cross(dir, v1)
	float w = rand(2 * pi)
	var bdir = (dir * 0.5 + cos(w) * v1 + sin(w) * v2).normalized()
	return bdir

func branch(pos0: vec3, dir0: vec3, num: int, radius: float, length: float)
	var dir = dir0
	var p = pos0
	vec3[] pos
	pos.add(pos0)
	for i in 1:num
		dir.x += rand(DIR_RAND * 2) - DIR_RAND
		dir.y += 0.5
		dir.z += rand(DIR_RAND * 2) - DIR_RAND
		dir = dir.normalized()
		p += dir * length
		pos.add(p)
		
		if rand(1) < BRANCH_PROB
			var bdir = get_rotated(dir)
			int bnum = (num - i + 0.5) * BRANCH_FACTOR
			if bnum > 1
				branch(p, bdir, bnum, radius / num * bnum, length)
	float[] r
	r.add(radius)
	r.add(0)
	var g = new Geometry.CylinderComplex(pos, r, 5, 16, Geometry.EndMode.OPEN)
	model.paste_geometry(g, 0)
	del g

func main()
	branch(vec3.0, vec3.EY, MAX_LENGTH, 5, 40)
