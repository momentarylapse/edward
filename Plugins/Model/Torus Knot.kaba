use hui
use edward

func CreateTorusKnot(nx: int, ny: int, rings: int, edges: int, r1: float, r2: float, r3: float)
	var g = new Geometry.TorusKnot(vector.0, vector.EZ, r1, r2, r3, nx, ny, rings, edges)
	model.paste_geometry(*g, 0)
	del g

func gcd(_a: int, _b: int) -> int
	int a = _a
	int b = _b
	while b != 0
		int t = b
		b = a % b
		a = t
	return a


class TorusDialog extends Dialog
	func __init__(parent: Window)
		super.__init__("Torus Knot", 300, 300, parent, false)
		#set_options("", "resizable,headerbar")
		add_grid("", 0, 0, "table")
		set_target("table")
		add_label("Loops", 0, 0, "")
		add_spin_button("3\\1", 1, 0, "nx")
		add_label("Twists", 0, 1, "")
		add_spin_button("7\\1", 1, 1, "ny")
		add_label("Edges", 0, 2, "")
		add_spin_button("8\\1", 1, 2, "edges")
		add_label("Rings", 0, 3, "")
		add_spin_button("100\\1", 1, 3, "rings")
		add_label("Radius Torus (outer)", 0, 4, "")
		add_spin_button("100\\0\\100000000000000\\0.1", 1, 4, "radius1")
		add_label("Radius Torus (inner)", 0, 5, "")
		add_spin_button("40\\0\\100000000000000\\0.1", 1, 5, "radius2")
		add_label("Radius Knot", 0, 6, "")
		add_spin_button("15\\0\\100000000000000\\0.1", 1, 6, "radius3")
		add_button("Ok", 1, 7, "ok")
	
		event("ok", on_ok)

	func on_ok()
		int nx = get_int("nx")
		int ny = get_int("ny")
		if gcd(nx, ny) != 1
			hui.error_box(self, "Error", "GreatestCommonDivisor(Loops, Twists) = 1 violated")
		else
			CreateTorusKnot(nx, ny, get_int("rings"), get_int("edges"), get_float("radius1"), get_float("radius2"), get_float("radius3"))
		destroy()

func main()

	var dlg = new TorusDialog(edward)	
	dlg.run()
	del dlg
