use edward

class NodeSurfaceOutput extends shader.Node
	void __init__()
		super.__init__("SurfaceOutput")
		params.add([shader.TYPE_COLOR, "diffuse", "#ffffffff", ""])
		params.add([shader.TYPE_FLOAT, "ambient", "0.3", "range=0:1"])
		params.add([shader.TYPE_FLOAT, "specular", "0.1", "range=0:1"])
		params.add([shader.TYPE_FLOAT, "shininess", "10.0", "range=0:50"])
		params.add([shader.TYPE_COLOR, "emission", "#000000ff", ""])
		params.add([shader.TYPE_VEC3, "normals", "-mesh-", ""])
	override const string[] dependencies()
		return ["basic_lighting", "light", "matview", "matworld", "material", "pos", "normal"]
	override const string code_pixel(out shader.BuilderContext c)
		let n = c.build_value(self, 5, "in_normal")
		let di = c.value(self, 0)
		let am = c.value(self, 1)
		let sp = c.value(self, 2)
		let sh = c.value(self, 3)
		let em = c.value(self, 4)
		return "
	out_color = vec4(0,0,0,0);
	for (int i=0; i<num_lights; i++)
		out_color += basic_lighting({{n}}, {{di}}, {{am}}, {{sp}}, {{sh}}, {{em}}, light[i]);"
