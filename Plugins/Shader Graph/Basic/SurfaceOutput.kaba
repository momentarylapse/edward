use edward

class NodeSurfaceOutput extends shader.Node
	void __init__()
		super.__init__("SurfaceOutput")
		params.add([shader.TYPE_COLOR, "albedo", "#ffffffff", ""])
		params.add([shader.TYPE_FLOAT, "roughness", "0.3", "range=0:1"])
		params.add([shader.TYPE_FLOAT, "reflectivity", "0.1", "range=0:1"])
		params.add([shader.TYPE_FLOAT, "shininess", "10.0", "range=0:50"])
		params.add([shader.TYPE_COLOR, "emission", "#000000ff", ""])
		params.add([shader.TYPE_VEC3, "normal", "vec3(0,0,1)", ""])
	override const string[] dependencies()
		return ["import:surface"]
#		return ["basic_lighting", "light", "matview", "matworld", "material", "pos", "normal"]
	override const string code_pixel(out shader.BuilderContext c)
		let al = c.value(self, 0)
		let ro = c.value(self, 1)
		let re = c.value(self, 2)
		#let sh = c.value(self, 3)
		let em = c.value(self, 4)
		let n = c.value(self, 5)
		return "
	surface_out({{n}}, {{al}}, {{em}}, {{re}}, {{ro}});"
