use edward

class NodeSurfaceOutput extends shader.Node
	func __init__()
		super.__init__("SurfaceOutput")
		params.add([shader.TYPE_COLOR, "albedo", "#ffffffff", ""])
		params.add([shader.TYPE_FLOAT, "roughness", "0.3", "range=0:1"])
		params.add([shader.TYPE_FLOAT, "metal", "0.1", "range=0:1"])
		params.add([shader.TYPE_COLOR, "emission", "#000000ff", ""])
		params.add([shader.TYPE_VEC3, "normal", "vec3(0,0,1)", ""])
	func override const dependencies() -> string[]
		return ["import:surface"]
#		return ["basic_lighting", "light", "matview", "matworld", "material", "pos", "normal"]
	func override const code_pixel(out c: shader.BuilderContext) -> string
		var al = c.value(self, 0)
		var ro = c.value(self, 1)
		var me = c.value(self, 2)
		var em = c.value(self, 3)
		var n = c.value(self, 4)
		return "
	surface_out({{n}}, {{al}}, {{em}}, {{me}}, {{ro}});"

# 4,5 -> 3,4