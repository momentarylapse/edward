class BonePos
	int x, y
	void __init__()
		x = -1
		y = -1
	void __init__(int _x, int _y)
		x = _x
		y = _y

class _Bone
	string name
	int parent

class Annotator extends Dialog
	string filename
	string bone_filename
	string image_dir
	_Bone[] bones
	string[] image_files
	int frame_no
	int bone_no
	Image *im
	float scale
	BonePos[][] pos
	void __init__(string _filename)
		super.__init__("Annotator", 1280, 900, nil, false)
		filename = _filename
		im = nil
		scale = 0.75
		
		add_drawing_area("!grabfocus", 0, 0, "area")
		
		load()
		set_frame(0)
		set_bone(0)
	
	void load_bones()
		let f = FileOpenText(bone_filename)
		string t
		f >> t
		while true
			_Bone b
			f >> b.name
			if b.name == ""
				break
			f >> b.parent
			bones.add(b)
		delete f
		
	void load()
		let f = FileOpenText(filename)
		int num_frames, num_bones
		string t
		f >> t
		f >> num_bones
		f >> bone_filename
		load_bones()
		if len(bones) < num_bones
			bones.resize(num_bones)
		
		f >> t
		f >> image_dir
		
		f >> t
		f >> num_frames
		
		DirEntry[] list = DirSearch(image_dir, "*.jpg", false)
		for e in list
			image_files.add(image_dir + e.name)
		image_files.resize(num_frames)
		
		f >> t
		pos.resize(num_frames)
		for i in 0:num_frames
			pos[i].resize(len(bones))
		try
			for i in 0:num_frames
				for j in 0:num_bones
					int k = j
					f >> pos[i][k].x
					f >> pos[i][k].y
		except
			pass
	
		delete f
	void save()
		let f = FileCreateText(filename)
		f << "// bones"
		f << len(bones)
		f << bone_filename
		f << "// images"
		f << image_dir
		f << "// frames"
		f << len(pos)
		f << "// annotation"
		for frame in pos
			for b in frame
				f << b.x
				f << b.y
		delete f
	
	void set_frame(int index)
		frame_no = loopi(index, 0, len(image_files)-1)
		if im
			delete im
		let orig = LoadImage(image_files[frame_no])
		im = orig.scale(orig.width * scale, orig.height * scale)
		delete orig
		
		
		redraw("area")
	
	void set_bone(int index)
		bone_no = loopi(index, 0, len(bones)-1)
		redraw("area")
	
	override void on_draw(Painter *p)
		int w = p.width
		int h = p.height
		if im
			p.draw_image(0, 0, *im)
		p.set_color(White)
		p.draw_str(10, 20, "frame " + (frame_no+1) + "/" + len(image_files) + "  " + bones[bone_no].name)// + "  bone " + (bone_no + 1) + "/" + len(bones) + " " + bones[bone_no])
		
		for b,i in pos[frame_no]
			p.set_color(Blue)
			if i == bone_no
				p.set_color(Red)
			p.draw_circle(b.x*scale, b.y*scale, 2)
			if bones[i].parent >= 0
				p.draw_line(b.x*scale, b.y*scale, pos[frame_no][bones[i].parent].x*scale, pos[frame_no][bones[i].parent].y*scale)
	
	override void on_key_down()
		int k = HuiGetEvent().key_code
		if k == KEY_RIGHT
			set_frame(frame_no + 1)
		if k == KEY_LEFT
			set_frame(frame_no - 1)
		if k == KEY_UP
			set_bone(bone_no + 1)
		if k == KEY_DOWN
			set_bone(bone_no - 1)
		if k == KEY_CONTROL + KEY_S
			save()
	
	override void on_left_button_down()
		let e = HuiGetEvent()
		pos[frame_no][bone_no] = BonePos(e.mouse_x/scale, e.mouse_y/scale)
		redraw("area")
		


void main(string[] arg)
	if arg.num > 0
		let d = new Annotator(arg[0])
		d.run()
	else
		if HuiFileDialogOpen(nil, "", "", "*", "*")
			let d = new Annotator(HuiFilename)
			d.run()
